# Generated from GoParser.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if __name__ is not None and "." in __name__:
    from .GoParserBase import GoParserBase
else:
    from GoParserBase import GoParserBase

def serializedATN():
    return [
        4,1,88,962,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,
        2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
        7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
        2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
        7,98,1,0,1,0,1,0,1,0,1,0,5,0,204,8,0,10,0,12,0,207,9,0,1,0,1,0,1,
        0,3,0,212,8,0,1,0,1,0,5,0,216,8,0,10,0,12,0,219,9,0,1,0,1,0,1,1,
        1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,5,2,232,8,2,10,2,12,2,235,9,2,1,
        2,3,2,238,8,2,1,3,3,3,241,8,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,3,5,250,
        8,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,258,8,6,10,6,12,6,261,9,6,1,6,3,
        6,264,8,6,1,7,1,7,3,7,268,8,7,1,7,1,7,3,7,272,8,7,1,8,1,8,1,8,5,
        8,277,8,8,10,8,12,8,280,9,8,1,9,1,9,1,9,5,9,285,8,9,10,9,12,9,288,
        9,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,296,8,10,10,10,12,10,299,
        9,10,1,10,3,10,302,8,10,1,11,1,11,3,11,306,8,11,1,11,1,11,1,12,1,
        12,1,12,1,12,3,12,314,8,12,1,13,1,13,1,13,1,13,1,13,3,13,321,8,13,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,5,15,331,8,15,10,15,12,15,
        334,9,15,1,15,3,15,337,8,15,1,16,1,16,1,16,1,16,3,16,343,8,16,1,
        16,1,16,3,16,347,8,16,1,17,1,17,3,17,351,8,17,1,17,1,17,1,18,3,18,
        356,8,18,1,18,3,18,359,8,18,1,18,3,18,362,8,18,1,18,1,18,1,18,4,
        18,367,8,18,11,18,12,18,368,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,386,8,19,1,20,1,20,1,
        20,1,20,1,20,3,20,393,8,20,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,
        23,1,23,1,24,1,24,1,24,1,24,1,25,3,25,409,8,25,1,25,1,25,1,26,1,
        26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,3,28,422,8,28,1,29,1,29,3,
        29,426,8,29,1,30,1,30,3,30,430,8,30,1,31,1,31,3,31,434,8,31,1,32,
        1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,3,35,453,8,35,1,35,1,35,1,35,1,35,3,35,459,8,35,3,
        35,461,8,35,1,36,1,36,3,36,465,8,36,1,37,1,37,3,37,469,8,37,1,37,
        3,37,472,8,37,1,37,1,37,3,37,476,8,37,3,37,478,8,37,1,37,1,37,5,
        37,482,8,37,10,37,12,37,485,9,37,1,37,1,37,1,38,1,38,1,38,3,38,492,
        8,38,1,39,1,39,1,39,3,39,497,8,39,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,3,40,508,8,40,1,40,1,40,5,40,512,8,40,10,40,12,40,
        515,9,40,1,40,1,40,1,41,1,41,3,41,521,8,41,1,41,1,41,1,41,1,41,1,
        41,1,41,1,42,1,42,1,42,3,42,532,8,42,1,43,1,43,1,43,3,43,537,8,43,
        1,44,1,44,3,44,541,8,44,1,44,1,44,1,44,3,44,546,8,44,5,44,548,8,
        44,10,44,12,44,551,9,44,1,45,1,45,1,45,5,45,556,8,45,10,45,12,45,
        559,9,45,1,45,1,45,1,46,1,46,1,46,3,46,566,8,46,1,47,1,47,1,47,3,
        47,571,8,47,1,47,3,47,574,8,47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
        582,8,48,1,48,1,48,1,49,1,49,3,49,588,8,49,1,49,1,49,3,49,592,8,
        49,3,49,594,8,49,1,49,1,49,1,50,3,50,599,8,50,1,50,1,50,3,50,603,
        8,50,1,50,1,50,3,50,607,8,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,
        615,8,51,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,
        1,53,3,53,629,8,53,1,54,1,54,3,54,633,8,54,1,55,1,55,1,55,1,55,1,
        55,1,55,1,55,1,55,3,55,643,8,55,1,56,1,56,1,56,1,56,1,56,1,57,1,
        57,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,3,60,661,8,60,1,
        60,1,60,5,60,665,8,60,10,60,12,60,668,9,60,1,60,1,60,1,61,1,61,1,
        61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,3,
        63,687,8,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,3,64,697,8,64,
        1,65,1,65,1,65,1,66,1,66,1,66,1,66,3,66,706,8,66,1,67,1,67,3,67,
        710,8,67,1,68,1,68,1,68,1,68,5,68,716,8,68,10,68,12,68,719,9,68,
        1,68,3,68,722,8,68,3,68,724,8,68,1,68,1,68,1,69,3,69,729,8,69,1,
        69,3,69,732,8,69,1,69,1,69,1,70,1,70,1,70,1,70,3,70,740,8,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,5,70,757,8,70,10,70,12,70,760,9,70,1,71,1,71,1,71,1,71,3,71,
        766,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,775,8,71,5,71,777,
        8,71,10,71,12,71,780,9,71,1,72,1,72,1,72,1,72,3,72,786,8,72,1,72,
        1,72,1,73,1,73,1,73,1,73,1,73,3,73,795,8,73,1,74,1,74,1,74,1,74,
        1,74,1,74,3,74,803,8,74,1,75,1,75,1,75,3,75,808,8,75,1,76,1,76,1,
        76,1,76,3,76,814,8,76,1,77,1,77,1,78,1,78,1,79,1,79,1,79,1,79,1,
        80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,836,
        8,81,1,82,1,82,1,82,3,82,841,8,82,3,82,843,8,82,1,82,1,82,1,83,1,
        83,1,83,5,83,850,8,83,10,83,12,83,853,9,83,1,84,1,84,1,84,3,84,858,
        8,84,1,84,1,84,1,85,1,85,3,85,864,8,85,1,86,1,86,3,86,868,8,86,1,
        87,1,87,1,87,1,87,1,87,5,87,875,8,87,10,87,12,87,878,9,87,1,87,1,
        87,1,88,1,88,1,88,1,88,3,88,886,8,88,1,88,3,88,889,8,88,1,89,1,89,
        1,90,3,90,894,8,90,1,90,1,90,1,91,1,91,1,91,1,91,1,92,1,92,1,92,
        1,92,1,93,1,93,3,93,908,8,93,1,93,1,93,3,93,912,8,93,1,93,3,93,915,
        8,93,1,93,1,93,1,93,1,93,1,93,3,93,922,8,93,1,93,1,93,1,94,1,94,
        1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,3,95,936,8,95,3,95,938,8,
        95,1,95,3,95,941,8,95,1,95,3,95,944,8,95,3,95,946,8,95,1,95,1,95,
        1,96,1,96,1,96,1,96,1,97,1,97,1,98,1,98,1,98,1,98,3,98,960,8,98,
        1,98,0,2,140,142,99,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,196,0,10,2,0,27,27,38,38,1,0,39,
        40,2,0,51,56,58,62,2,0,36,36,87,87,1,0,57,63,2,0,52,56,61,62,2,0,
        51,51,58,60,1,0,45,50,2,0,64,67,71,72,1,0,78,79,1022,0,198,1,0,0,
        0,2,222,1,0,0,0,4,225,1,0,0,0,6,240,1,0,0,0,8,244,1,0,0,0,10,249,
        1,0,0,0,12,251,1,0,0,0,14,265,1,0,0,0,16,273,1,0,0,0,18,281,1,0,
        0,0,20,289,1,0,0,0,22,303,1,0,0,0,24,309,1,0,0,0,26,315,1,0,0,0,
        28,322,1,0,0,0,30,324,1,0,0,0,32,338,1,0,0,0,34,348,1,0,0,0,36,366,
        1,0,0,0,38,385,1,0,0,0,40,392,1,0,0,0,42,394,1,0,0,0,44,396,1,0,
        0,0,46,400,1,0,0,0,48,403,1,0,0,0,50,408,1,0,0,0,52,412,1,0,0,0,
        54,416,1,0,0,0,56,418,1,0,0,0,58,423,1,0,0,0,60,427,1,0,0,0,62,431,
        1,0,0,0,64,435,1,0,0,0,66,438,1,0,0,0,68,440,1,0,0,0,70,443,1,0,
        0,0,72,464,1,0,0,0,74,466,1,0,0,0,76,488,1,0,0,0,78,496,1,0,0,0,
        80,498,1,0,0,0,82,520,1,0,0,0,84,528,1,0,0,0,86,536,1,0,0,0,88,540,
        1,0,0,0,90,552,1,0,0,0,92,562,1,0,0,0,94,573,1,0,0,0,96,581,1,0,
        0,0,98,585,1,0,0,0,100,598,1,0,0,0,102,614,1,0,0,0,104,619,1,0,0,
        0,106,628,1,0,0,0,108,632,1,0,0,0,110,642,1,0,0,0,112,644,1,0,0,
        0,114,649,1,0,0,0,116,651,1,0,0,0,118,653,1,0,0,0,120,656,1,0,0,
        0,122,671,1,0,0,0,124,675,1,0,0,0,126,686,1,0,0,0,128,696,1,0,0,
        0,130,698,1,0,0,0,132,705,1,0,0,0,134,709,1,0,0,0,136,711,1,0,0,
        0,138,728,1,0,0,0,140,739,1,0,0,0,142,765,1,0,0,0,144,781,1,0,0,
        0,146,794,1,0,0,0,148,802,1,0,0,0,150,807,1,0,0,0,152,813,1,0,0,
        0,154,815,1,0,0,0,156,817,1,0,0,0,158,819,1,0,0,0,160,823,1,0,0,
        0,162,835,1,0,0,0,164,837,1,0,0,0,166,846,1,0,0,0,168,857,1,0,0,
        0,170,863,1,0,0,0,172,867,1,0,0,0,174,869,1,0,0,0,176,885,1,0,0,
        0,178,890,1,0,0,0,180,893,1,0,0,0,182,897,1,0,0,0,184,901,1,0,0,
        0,186,905,1,0,0,0,188,925,1,0,0,0,190,930,1,0,0,0,192,949,1,0,0,
        0,194,953,1,0,0,0,196,959,1,0,0,0,198,199,3,2,1,0,199,205,3,196,
        98,0,200,201,3,4,2,0,201,202,3,196,98,0,202,204,1,0,0,0,203,200,
        1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,217,
        1,0,0,0,207,205,1,0,0,0,208,212,3,24,12,0,209,212,3,26,13,0,210,
        212,3,10,5,0,211,208,1,0,0,0,211,209,1,0,0,0,211,210,1,0,0,0,212,
        213,1,0,0,0,213,214,3,196,98,0,214,216,1,0,0,0,215,211,1,0,0,0,216,
        219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,
        217,1,0,0,0,220,221,5,0,0,1,221,1,1,0,0,0,222,223,5,14,0,0,223,224,
        5,27,0,0,224,3,1,0,0,0,225,237,5,23,0,0,226,238,3,6,3,0,227,233,
        5,28,0,0,228,229,3,6,3,0,229,230,3,196,98,0,230,232,1,0,0,0,231,
        228,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,
        236,1,0,0,0,235,233,1,0,0,0,236,238,5,29,0,0,237,226,1,0,0,0,237,
        227,1,0,0,0,238,5,1,0,0,0,239,241,7,0,0,0,240,239,1,0,0,0,240,241,
        1,0,0,0,241,242,1,0,0,0,242,243,3,8,4,0,243,7,1,0,0,0,244,245,3,
        178,89,0,245,9,1,0,0,0,246,250,3,12,6,0,247,250,3,20,10,0,248,250,
        3,30,15,0,249,246,1,0,0,0,249,247,1,0,0,0,249,248,1,0,0,0,250,11,
        1,0,0,0,251,263,5,16,0,0,252,264,3,14,7,0,253,259,5,28,0,0,254,255,
        3,14,7,0,255,256,3,196,98,0,256,258,1,0,0,0,257,254,1,0,0,0,258,
        261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,262,1,0,0,0,261,
        259,1,0,0,0,262,264,5,29,0,0,263,252,1,0,0,0,263,253,1,0,0,0,264,
        13,1,0,0,0,265,271,3,16,8,0,266,268,3,106,53,0,267,266,1,0,0,0,267,
        268,1,0,0,0,268,269,1,0,0,0,269,270,5,34,0,0,270,272,3,18,9,0,271,
        267,1,0,0,0,271,272,1,0,0,0,272,15,1,0,0,0,273,278,5,27,0,0,274,
        275,5,35,0,0,275,277,5,27,0,0,276,274,1,0,0,0,277,280,1,0,0,0,278,
        276,1,0,0,0,278,279,1,0,0,0,279,17,1,0,0,0,280,278,1,0,0,0,281,286,
        3,140,70,0,282,283,5,35,0,0,283,285,3,140,70,0,284,282,1,0,0,0,285,
        288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,19,1,0,0,0,288,286,
        1,0,0,0,289,301,5,20,0,0,290,302,3,22,11,0,291,297,5,28,0,0,292,
        293,3,22,11,0,293,294,3,196,98,0,294,296,1,0,0,0,295,292,1,0,0,0,
        296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,
        299,297,1,0,0,0,300,302,5,29,0,0,301,290,1,0,0,0,301,291,1,0,0,0,
        302,21,1,0,0,0,303,305,5,27,0,0,304,306,5,34,0,0,305,304,1,0,0,0,
        305,306,1,0,0,0,306,307,1,0,0,0,307,308,3,106,53,0,308,23,1,0,0,
        0,309,310,5,3,0,0,310,311,5,27,0,0,311,313,3,132,66,0,312,314,3,
        34,17,0,313,312,1,0,0,0,313,314,1,0,0,0,314,25,1,0,0,0,315,316,5,
        3,0,0,316,317,3,28,14,0,317,318,5,27,0,0,318,320,3,132,66,0,319,
        321,3,34,17,0,320,319,1,0,0,0,320,321,1,0,0,0,321,27,1,0,0,0,322,
        323,3,136,68,0,323,29,1,0,0,0,324,336,5,25,0,0,325,337,3,32,16,0,
        326,332,5,28,0,0,327,328,3,32,16,0,328,329,3,196,98,0,329,331,1,
        0,0,0,330,327,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,
        0,0,0,333,335,1,0,0,0,334,332,1,0,0,0,335,337,5,29,0,0,336,325,1,
        0,0,0,336,326,1,0,0,0,337,31,1,0,0,0,338,346,3,16,8,0,339,342,3,
        106,53,0,340,341,5,34,0,0,341,343,3,18,9,0,342,340,1,0,0,0,342,343,
        1,0,0,0,343,347,1,0,0,0,344,345,5,34,0,0,345,347,3,18,9,0,346,339,
        1,0,0,0,346,344,1,0,0,0,347,33,1,0,0,0,348,350,5,30,0,0,349,351,
        3,36,18,0,350,349,1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,353,
        5,31,0,0,353,35,1,0,0,0,354,356,5,36,0,0,355,354,1,0,0,0,355,356,
        1,0,0,0,356,362,1,0,0,0,357,359,5,87,0,0,358,357,1,0,0,0,358,359,
        1,0,0,0,359,362,1,0,0,0,360,362,4,18,0,0,361,355,1,0,0,0,361,358,
        1,0,0,0,361,360,1,0,0,0,362,363,1,0,0,0,363,364,3,38,19,0,364,365,
        3,196,98,0,365,367,1,0,0,0,366,361,1,0,0,0,367,368,1,0,0,0,368,366,
        1,0,0,0,368,369,1,0,0,0,369,37,1,0,0,0,370,386,3,10,5,0,371,386,
        3,56,28,0,372,386,3,40,20,0,373,386,3,104,52,0,374,386,3,58,29,0,
        375,386,3,60,30,0,376,386,3,62,31,0,377,386,3,64,32,0,378,386,3,
        66,33,0,379,386,3,34,17,0,380,386,3,70,35,0,381,386,3,72,36,0,382,
        386,3,90,45,0,383,386,3,98,49,0,384,386,3,68,34,0,385,370,1,0,0,
        0,385,371,1,0,0,0,385,372,1,0,0,0,385,373,1,0,0,0,385,374,1,0,0,
        0,385,375,1,0,0,0,385,376,1,0,0,0,385,377,1,0,0,0,385,378,1,0,0,
        0,385,379,1,0,0,0,385,380,1,0,0,0,385,381,1,0,0,0,385,382,1,0,0,
        0,385,383,1,0,0,0,385,384,1,0,0,0,386,39,1,0,0,0,387,393,3,44,22,
        0,388,393,3,46,23,0,389,393,3,48,24,0,390,393,3,42,21,0,391,393,
        3,52,26,0,392,387,1,0,0,0,392,388,1,0,0,0,392,389,1,0,0,0,392,390,
        1,0,0,0,392,391,1,0,0,0,393,41,1,0,0,0,394,395,3,140,70,0,395,43,
        1,0,0,0,396,397,3,140,70,0,397,398,5,63,0,0,398,399,3,140,70,0,399,
        45,1,0,0,0,400,401,3,140,70,0,401,402,7,1,0,0,402,47,1,0,0,0,403,
        404,3,18,9,0,404,405,3,50,25,0,405,406,3,18,9,0,406,49,1,0,0,0,407,
        409,7,2,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,
        411,5,34,0,0,411,51,1,0,0,0,412,413,3,16,8,0,413,414,5,41,0,0,414,
        415,3,18,9,0,415,53,1,0,0,0,416,417,7,3,0,0,417,55,1,0,0,0,418,419,
        5,27,0,0,419,421,5,37,0,0,420,422,3,38,19,0,421,420,1,0,0,0,421,
        422,1,0,0,0,422,57,1,0,0,0,423,425,5,24,0,0,424,426,3,18,9,0,425,
        424,1,0,0,0,425,426,1,0,0,0,426,59,1,0,0,0,427,429,5,1,0,0,428,430,
        5,27,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,61,1,0,0,0,431,433,
        5,21,0,0,432,434,5,27,0,0,433,432,1,0,0,0,433,434,1,0,0,0,434,63,
        1,0,0,0,435,436,5,13,0,0,436,437,5,27,0,0,437,65,1,0,0,0,438,439,
        5,17,0,0,439,67,1,0,0,0,440,441,5,7,0,0,441,442,3,140,70,0,442,69,
        1,0,0,0,443,452,5,18,0,0,444,453,3,140,70,0,445,446,3,196,98,0,446,
        447,3,140,70,0,447,453,1,0,0,0,448,449,3,40,20,0,449,450,3,196,98,
        0,450,451,3,140,70,0,451,453,1,0,0,0,452,444,1,0,0,0,452,445,1,0,
        0,0,452,448,1,0,0,0,453,454,1,0,0,0,454,460,3,34,17,0,455,458,5,
        12,0,0,456,459,3,70,35,0,457,459,3,34,17,0,458,456,1,0,0,0,458,457,
        1,0,0,0,459,461,1,0,0,0,460,455,1,0,0,0,460,461,1,0,0,0,461,71,1,
        0,0,0,462,465,3,74,37,0,463,465,3,80,40,0,464,462,1,0,0,0,464,463,
        1,0,0,0,465,73,1,0,0,0,466,477,5,15,0,0,467,469,3,140,70,0,468,467,
        1,0,0,0,468,469,1,0,0,0,469,478,1,0,0,0,470,472,3,40,20,0,471,470,
        1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,475,3,196,98,0,474,476,
        3,140,70,0,475,474,1,0,0,0,475,476,1,0,0,0,476,478,1,0,0,0,477,468,
        1,0,0,0,477,471,1,0,0,0,478,479,1,0,0,0,479,483,5,30,0,0,480,482,
        3,76,38,0,481,480,1,0,0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,
        1,0,0,0,484,486,1,0,0,0,485,483,1,0,0,0,486,487,5,31,0,0,487,75,
        1,0,0,0,488,489,3,78,39,0,489,491,5,37,0,0,490,492,3,36,18,0,491,
        490,1,0,0,0,491,492,1,0,0,0,492,77,1,0,0,0,493,494,5,6,0,0,494,497,
        3,18,9,0,495,497,5,2,0,0,496,493,1,0,0,0,496,495,1,0,0,0,497,79,
        1,0,0,0,498,507,5,15,0,0,499,508,3,82,41,0,500,501,3,196,98,0,501,
        502,3,82,41,0,502,508,1,0,0,0,503,504,3,40,20,0,504,505,3,196,98,
        0,505,506,3,82,41,0,506,508,1,0,0,0,507,499,1,0,0,0,507,500,1,0,
        0,0,507,503,1,0,0,0,508,509,1,0,0,0,509,513,5,30,0,0,510,512,3,84,
        42,0,511,510,1,0,0,0,512,515,1,0,0,0,513,511,1,0,0,0,513,514,1,0,
        0,0,514,516,1,0,0,0,515,513,1,0,0,0,516,517,5,31,0,0,517,81,1,0,
        0,0,518,519,5,27,0,0,519,521,5,41,0,0,520,518,1,0,0,0,520,521,1,
        0,0,0,521,522,1,0,0,0,522,523,3,142,71,0,523,524,5,38,0,0,524,525,
        5,28,0,0,525,526,5,20,0,0,526,527,5,29,0,0,527,83,1,0,0,0,528,529,
        3,86,43,0,529,531,5,37,0,0,530,532,3,36,18,0,531,530,1,0,0,0,531,
        532,1,0,0,0,532,85,1,0,0,0,533,534,5,6,0,0,534,537,3,88,44,0,535,
        537,5,2,0,0,536,533,1,0,0,0,536,535,1,0,0,0,537,87,1,0,0,0,538,541,
        3,106,53,0,539,541,5,26,0,0,540,538,1,0,0,0,540,539,1,0,0,0,541,
        549,1,0,0,0,542,545,5,35,0,0,543,546,3,106,53,0,544,546,5,26,0,0,
        545,543,1,0,0,0,545,544,1,0,0,0,546,548,1,0,0,0,547,542,1,0,0,0,
        548,551,1,0,0,0,549,547,1,0,0,0,549,550,1,0,0,0,550,89,1,0,0,0,551,
        549,1,0,0,0,552,553,5,5,0,0,553,557,5,30,0,0,554,556,3,92,46,0,555,
        554,1,0,0,0,556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,
        560,1,0,0,0,559,557,1,0,0,0,560,561,5,31,0,0,561,91,1,0,0,0,562,
        563,3,94,47,0,563,565,5,37,0,0,564,566,3,36,18,0,565,564,1,0,0,0,
        565,566,1,0,0,0,566,93,1,0,0,0,567,570,5,6,0,0,568,571,3,44,22,0,
        569,571,3,96,48,0,570,568,1,0,0,0,570,569,1,0,0,0,571,574,1,0,0,
        0,572,574,5,2,0,0,573,567,1,0,0,0,573,572,1,0,0,0,574,95,1,0,0,0,
        575,576,3,18,9,0,576,577,5,34,0,0,577,582,1,0,0,0,578,579,3,16,8,
        0,579,580,5,41,0,0,580,582,1,0,0,0,581,575,1,0,0,0,581,578,1,0,0,
        0,581,582,1,0,0,0,582,583,1,0,0,0,583,584,3,140,70,0,584,97,1,0,
        0,0,585,593,5,22,0,0,586,588,3,140,70,0,587,586,1,0,0,0,587,588,
        1,0,0,0,588,594,1,0,0,0,589,594,3,100,50,0,590,592,3,102,51,0,591,
        590,1,0,0,0,591,592,1,0,0,0,592,594,1,0,0,0,593,587,1,0,0,0,593,
        589,1,0,0,0,593,591,1,0,0,0,594,595,1,0,0,0,595,596,3,34,17,0,596,
        99,1,0,0,0,597,599,3,40,20,0,598,597,1,0,0,0,598,599,1,0,0,0,599,
        600,1,0,0,0,600,602,3,196,98,0,601,603,3,140,70,0,602,601,1,0,0,
        0,602,603,1,0,0,0,603,604,1,0,0,0,604,606,3,196,98,0,605,607,3,40,
        20,0,606,605,1,0,0,0,606,607,1,0,0,0,607,101,1,0,0,0,608,609,3,18,
        9,0,609,610,5,34,0,0,610,615,1,0,0,0,611,612,3,16,8,0,612,613,5,
        41,0,0,613,615,1,0,0,0,614,608,1,0,0,0,614,611,1,0,0,0,614,615,1,
        0,0,0,615,616,1,0,0,0,616,617,5,19,0,0,617,618,3,140,70,0,618,103,
        1,0,0,0,619,620,5,8,0,0,620,621,3,140,70,0,621,105,1,0,0,0,622,629,
        3,108,54,0,623,629,3,110,55,0,624,625,5,28,0,0,625,626,3,106,53,
        0,626,627,5,29,0,0,627,629,1,0,0,0,628,622,1,0,0,0,628,623,1,0,0,
        0,628,624,1,0,0,0,629,107,1,0,0,0,630,633,3,158,79,0,631,633,5,27,
        0,0,632,630,1,0,0,0,632,631,1,0,0,0,633,109,1,0,0,0,634,643,3,112,
        56,0,635,643,3,174,87,0,636,643,3,118,59,0,637,643,3,130,65,0,638,
        643,3,120,60,0,639,643,3,122,61,0,640,643,3,124,62,0,641,643,3,126,
        63,0,642,634,1,0,0,0,642,635,1,0,0,0,642,636,1,0,0,0,642,637,1,0,
        0,0,642,638,1,0,0,0,642,639,1,0,0,0,642,640,1,0,0,0,642,641,1,0,
        0,0,643,111,1,0,0,0,644,645,5,32,0,0,645,646,3,114,57,0,646,647,
        5,33,0,0,647,648,3,116,58,0,648,113,1,0,0,0,649,650,3,140,70,0,650,
        115,1,0,0,0,651,652,3,106,53,0,652,117,1,0,0,0,653,654,5,61,0,0,
        654,655,3,106,53,0,655,119,1,0,0,0,656,657,5,4,0,0,657,666,5,30,
        0,0,658,661,3,128,64,0,659,661,3,108,54,0,660,658,1,0,0,0,660,659,
        1,0,0,0,661,662,1,0,0,0,662,663,3,196,98,0,663,665,1,0,0,0,664,660,
        1,0,0,0,665,668,1,0,0,0,666,664,1,0,0,0,666,667,1,0,0,0,667,669,
        1,0,0,0,668,666,1,0,0,0,669,670,5,31,0,0,670,121,1,0,0,0,671,672,
        5,32,0,0,672,673,5,33,0,0,673,674,3,116,58,0,674,123,1,0,0,0,675,
        676,5,9,0,0,676,677,5,32,0,0,677,678,3,106,53,0,678,679,5,33,0,0,
        679,680,3,116,58,0,680,125,1,0,0,0,681,687,5,11,0,0,682,683,5,11,
        0,0,683,687,5,63,0,0,684,685,5,63,0,0,685,687,5,11,0,0,686,681,1,
        0,0,0,686,682,1,0,0,0,686,684,1,0,0,0,687,688,1,0,0,0,688,689,3,
        116,58,0,689,127,1,0,0,0,690,691,5,27,0,0,691,692,3,136,68,0,692,
        693,3,134,67,0,693,697,1,0,0,0,694,695,5,27,0,0,695,697,3,136,68,
        0,696,690,1,0,0,0,696,694,1,0,0,0,697,129,1,0,0,0,698,699,5,3,0,
        0,699,700,3,132,66,0,700,131,1,0,0,0,701,702,3,136,68,0,702,703,
        3,134,67,0,703,706,1,0,0,0,704,706,3,136,68,0,705,701,1,0,0,0,705,
        704,1,0,0,0,706,133,1,0,0,0,707,710,3,136,68,0,708,710,3,106,53,
        0,709,707,1,0,0,0,709,708,1,0,0,0,710,135,1,0,0,0,711,723,5,28,0,
        0,712,717,3,138,69,0,713,714,5,35,0,0,714,716,3,138,69,0,715,713,
        1,0,0,0,716,719,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,721,
        1,0,0,0,719,717,1,0,0,0,720,722,5,35,0,0,721,720,1,0,0,0,721,722,
        1,0,0,0,722,724,1,0,0,0,723,712,1,0,0,0,723,724,1,0,0,0,724,725,
        1,0,0,0,725,726,5,29,0,0,726,137,1,0,0,0,727,729,3,16,8,0,728,727,
        1,0,0,0,728,729,1,0,0,0,729,731,1,0,0,0,730,732,5,42,0,0,731,730,
        1,0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,734,3,106,53,0,734,139,
        1,0,0,0,735,736,6,70,-1,0,736,740,3,142,71,0,737,738,7,4,0,0,738,
        740,3,140,70,6,739,735,1,0,0,0,739,737,1,0,0,0,740,758,1,0,0,0,741,
        742,10,5,0,0,742,743,7,5,0,0,743,757,3,140,70,6,744,745,10,4,0,0,
        745,746,7,6,0,0,746,757,3,140,70,5,747,748,10,3,0,0,748,749,7,7,
        0,0,749,757,3,140,70,4,750,751,10,2,0,0,751,752,5,44,0,0,752,757,
        3,140,70,3,753,754,10,1,0,0,754,755,5,43,0,0,755,757,3,140,70,2,
        756,741,1,0,0,0,756,744,1,0,0,0,756,747,1,0,0,0,756,750,1,0,0,0,
        756,753,1,0,0,0,757,760,1,0,0,0,758,756,1,0,0,0,758,759,1,0,0,0,
        759,141,1,0,0,0,760,758,1,0,0,0,761,762,6,71,-1,0,762,766,3,148,
        74,0,763,766,3,144,72,0,764,766,3,192,96,0,765,761,1,0,0,0,765,763,
        1,0,0,0,765,764,1,0,0,0,766,778,1,0,0,0,767,774,10,1,0,0,768,769,
        5,38,0,0,769,775,5,27,0,0,770,775,3,184,92,0,771,775,3,186,93,0,
        772,775,3,188,94,0,773,775,3,190,95,0,774,768,1,0,0,0,774,770,1,
        0,0,0,774,771,1,0,0,0,774,772,1,0,0,0,774,773,1,0,0,0,775,777,1,
        0,0,0,776,767,1,0,0,0,777,780,1,0,0,0,778,776,1,0,0,0,778,779,1,
        0,0,0,779,143,1,0,0,0,780,778,1,0,0,0,781,782,3,146,73,0,782,783,
        5,28,0,0,783,785,3,140,70,0,784,786,5,35,0,0,785,784,1,0,0,0,785,
        786,1,0,0,0,786,787,1,0,0,0,787,788,5,29,0,0,788,145,1,0,0,0,789,
        795,3,110,55,0,790,791,5,28,0,0,791,792,3,146,73,0,792,793,5,29,
        0,0,793,795,1,0,0,0,794,789,1,0,0,0,794,790,1,0,0,0,795,147,1,0,
        0,0,796,803,3,150,75,0,797,803,3,156,78,0,798,799,5,28,0,0,799,800,
        3,140,70,0,800,801,5,29,0,0,801,803,1,0,0,0,802,796,1,0,0,0,802,
        797,1,0,0,0,802,798,1,0,0,0,803,149,1,0,0,0,804,808,3,152,76,0,805,
        808,3,160,80,0,806,808,3,182,91,0,807,804,1,0,0,0,807,805,1,0,0,
        0,807,806,1,0,0,0,808,151,1,0,0,0,809,814,5,26,0,0,810,814,3,154,
        77,0,811,814,3,178,89,0,812,814,5,68,0,0,813,809,1,0,0,0,813,810,
        1,0,0,0,813,811,1,0,0,0,813,812,1,0,0,0,814,153,1,0,0,0,815,816,
        7,8,0,0,816,155,1,0,0,0,817,818,5,27,0,0,818,157,1,0,0,0,819,820,
        5,27,0,0,820,821,5,38,0,0,821,822,5,27,0,0,822,159,1,0,0,0,823,824,
        3,162,81,0,824,825,3,164,82,0,825,161,1,0,0,0,826,836,3,174,87,0,
        827,836,3,112,56,0,828,829,5,32,0,0,829,830,5,42,0,0,830,831,5,33,
        0,0,831,836,3,116,58,0,832,836,3,122,61,0,833,836,3,124,62,0,834,
        836,3,108,54,0,835,826,1,0,0,0,835,827,1,0,0,0,835,828,1,0,0,0,835,
        832,1,0,0,0,835,833,1,0,0,0,835,834,1,0,0,0,836,163,1,0,0,0,837,
        842,5,30,0,0,838,840,3,166,83,0,839,841,5,35,0,0,840,839,1,0,0,0,
        840,841,1,0,0,0,841,843,1,0,0,0,842,838,1,0,0,0,842,843,1,0,0,0,
        843,844,1,0,0,0,844,845,5,31,0,0,845,165,1,0,0,0,846,851,3,168,84,
        0,847,848,5,35,0,0,848,850,3,168,84,0,849,847,1,0,0,0,850,853,1,
        0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,167,1,0,0,0,853,851,1,
        0,0,0,854,855,3,170,85,0,855,856,5,37,0,0,856,858,1,0,0,0,857,854,
        1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,860,3,172,86,0,860,169,
        1,0,0,0,861,864,3,140,70,0,862,864,3,164,82,0,863,861,1,0,0,0,863,
        862,1,0,0,0,864,171,1,0,0,0,865,868,3,140,70,0,866,868,3,164,82,
        0,867,865,1,0,0,0,867,866,1,0,0,0,868,173,1,0,0,0,869,870,5,10,0,
        0,870,876,5,30,0,0,871,872,3,176,88,0,872,873,3,196,98,0,873,875,
        1,0,0,0,874,871,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,
        1,0,0,0,877,879,1,0,0,0,878,876,1,0,0,0,879,880,5,31,0,0,880,175,
        1,0,0,0,881,882,3,16,8,0,882,883,3,106,53,0,883,886,1,0,0,0,884,
        886,3,180,90,0,885,881,1,0,0,0,885,884,1,0,0,0,886,888,1,0,0,0,887,
        889,3,178,89,0,888,887,1,0,0,0,888,889,1,0,0,0,889,177,1,0,0,0,890,
        891,7,9,0,0,891,179,1,0,0,0,892,894,5,61,0,0,893,892,1,0,0,0,893,
        894,1,0,0,0,894,895,1,0,0,0,895,896,3,108,54,0,896,181,1,0,0,0,897,
        898,5,3,0,0,898,899,3,132,66,0,899,900,3,34,17,0,900,183,1,0,0,0,
        901,902,5,32,0,0,902,903,3,140,70,0,903,904,5,33,0,0,904,185,1,0,
        0,0,905,921,5,32,0,0,906,908,3,140,70,0,907,906,1,0,0,0,907,908,
        1,0,0,0,908,909,1,0,0,0,909,911,5,37,0,0,910,912,3,140,70,0,911,
        910,1,0,0,0,911,912,1,0,0,0,912,922,1,0,0,0,913,915,3,140,70,0,914,
        913,1,0,0,0,914,915,1,0,0,0,915,916,1,0,0,0,916,917,5,37,0,0,917,
        918,3,140,70,0,918,919,5,37,0,0,919,920,3,140,70,0,920,922,1,0,0,
        0,921,907,1,0,0,0,921,914,1,0,0,0,922,923,1,0,0,0,923,924,5,33,0,
        0,924,187,1,0,0,0,925,926,5,38,0,0,926,927,5,28,0,0,927,928,3,106,
        53,0,928,929,5,29,0,0,929,189,1,0,0,0,930,945,5,28,0,0,931,938,3,
        18,9,0,932,935,3,146,73,0,933,934,5,35,0,0,934,936,3,18,9,0,935,
        933,1,0,0,0,935,936,1,0,0,0,936,938,1,0,0,0,937,931,1,0,0,0,937,
        932,1,0,0,0,938,940,1,0,0,0,939,941,5,42,0,0,940,939,1,0,0,0,940,
        941,1,0,0,0,941,943,1,0,0,0,942,944,5,35,0,0,943,942,1,0,0,0,943,
        944,1,0,0,0,944,946,1,0,0,0,945,937,1,0,0,0,945,946,1,0,0,0,946,
        947,1,0,0,0,947,948,5,29,0,0,948,191,1,0,0,0,949,950,3,146,73,0,
        950,951,5,38,0,0,951,952,5,27,0,0,952,193,1,0,0,0,953,954,3,106,
        53,0,954,195,1,0,0,0,955,960,5,36,0,0,956,960,5,0,0,1,957,960,5,
        87,0,0,958,960,4,98,7,0,959,955,1,0,0,0,959,956,1,0,0,0,959,957,
        1,0,0,0,959,958,1,0,0,0,960,197,1,0,0,0,111,205,211,217,233,237,
        240,249,259,263,267,271,278,286,297,301,305,313,320,332,336,342,
        346,350,355,358,361,368,385,392,408,421,425,429,433,452,458,460,
        464,468,471,475,477,483,491,496,507,513,520,531,536,540,545,549,
        557,565,570,573,581,587,591,593,598,602,606,614,628,632,642,660,
        666,686,696,705,709,717,721,723,728,731,739,756,758,765,774,778,
        785,794,802,807,813,835,840,842,851,857,863,867,876,885,888,893,
        907,911,914,921,935,937,940,943,945,959
    ]

class GoParser ( GoParserBase ):

    grammarFileName = "GoParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'break'", "'default'", "'func'", "'interface'", 
                     "'select'", "'case'", "'defer'", "'go'", "'map'", "'struct'", 
                     "'chan'", "'else'", "'goto'", "'package'", "'switch'", 
                     "'const'", "'fallthrough'", "'if'", "'range'", "'type'", 
                     "'continue'", "'for'", "'import'", "'return'", "'var'", 
                     "'nil'", "<INVALID>", "'('", "')'", "'{'", "'}'", "'['", 
                     "']'", "'='", "','", "';'", "':'", "'.'", "'++'", "'--'", 
                     "':='", "'...'", "'||'", "'&&'", "'=='", "'!='", "'<'", 
                     "'<='", "'>'", "'>='", "'|'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&^'", "'!'", "'+'", "'-'", "'^'", "'*'", 
                     "'&'", "'<-'" ]

    symbolicNames = [ "<INVALID>", "BREAK", "DEFAULT", "FUNC", "INTERFACE", 
                      "SELECT", "CASE", "DEFER", "GO", "MAP", "STRUCT", 
                      "CHAN", "ELSE", "GOTO", "PACKAGE", "SWITCH", "CONST", 
                      "FALLTHROUGH", "IF", "RANGE", "TYPE", "CONTINUE", 
                      "FOR", "IMPORT", "RETURN", "VAR", "NIL_LIT", "IDENTIFIER", 
                      "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACKET", 
                      "R_BRACKET", "ASSIGN", "COMMA", "SEMI", "COLON", "DOT", 
                      "PLUS_PLUS", "MINUS_MINUS", "DECLARE_ASSIGN", "ELLIPSIS", 
                      "LOGICAL_OR", "LOGICAL_AND", "EQUALS", "NOT_EQUALS", 
                      "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", 
                      "OR", "DIV", "MOD", "LSHIFT", "RSHIFT", "BIT_CLEAR", 
                      "EXCLAMATION", "PLUS", "MINUS", "CARET", "STAR", "AMPERSAND", 
                      "RECEIVE", "DECIMAL_LIT", "BINARY_LIT", "OCTAL_LIT", 
                      "HEX_LIT", "FLOAT_LIT", "DECIMAL_FLOAT_LIT", "HEX_FLOAT_LIT", 
                      "IMAGINARY_LIT", "RUNE_LIT", "BYTE_VALUE", "OCTAL_BYTE_VALUE", 
                      "HEX_BYTE_VALUE", "LITTLE_U_VALUE", "BIG_U_VALUE", 
                      "RAW_STRING_LIT", "INTERPRETED_STRING_LIT", "WS", 
                      "COMMENT", "TERMINATOR", "LINE_COMMENT", "WS_NLSEMI", 
                      "COMMENT_NLSEMI", "LINE_COMMENT_NLSEMI", "EOS", "OTHER" ]

    RULE_sourceFile = 0
    RULE_packageClause = 1
    RULE_importDecl = 2
    RULE_importSpec = 3
    RULE_importPath = 4
    RULE_declaration = 5
    RULE_constDecl = 6
    RULE_constSpec = 7
    RULE_identifierList = 8
    RULE_expressionList = 9
    RULE_typeDecl = 10
    RULE_typeSpec = 11
    RULE_functionDecl = 12
    RULE_methodDecl = 13
    RULE_receiver = 14
    RULE_varDecl = 15
    RULE_varSpec = 16
    RULE_block = 17
    RULE_statementList = 18
    RULE_statement = 19
    RULE_simpleStmt = 20
    RULE_expressionStmt = 21
    RULE_sendStmt = 22
    RULE_incDecStmt = 23
    RULE_assignment = 24
    RULE_assign_op = 25
    RULE_shortVarDecl = 26
    RULE_emptyStmt = 27
    RULE_labeledStmt = 28
    RULE_returnStmt = 29
    RULE_breakStmt = 30
    RULE_continueStmt = 31
    RULE_gotoStmt = 32
    RULE_fallthroughStmt = 33
    RULE_deferStmt = 34
    RULE_ifStmt = 35
    RULE_switchStmt = 36
    RULE_exprSwitchStmt = 37
    RULE_exprCaseClause = 38
    RULE_exprSwitchCase = 39
    RULE_typeSwitchStmt = 40
    RULE_typeSwitchGuard = 41
    RULE_typeCaseClause = 42
    RULE_typeSwitchCase = 43
    RULE_typeList = 44
    RULE_selectStmt = 45
    RULE_commClause = 46
    RULE_commCase = 47
    RULE_recvStmt = 48
    RULE_forStmt = 49
    RULE_forClause = 50
    RULE_rangeClause = 51
    RULE_goStmt = 52
    RULE_type_ = 53
    RULE_typeName = 54
    RULE_typeLit = 55
    RULE_arrayType = 56
    RULE_arrayLength = 57
    RULE_elementType = 58
    RULE_pointerType = 59
    RULE_interfaceType = 60
    RULE_sliceType = 61
    RULE_mapType = 62
    RULE_channelType = 63
    RULE_methodSpec = 64
    RULE_functionType = 65
    RULE_signature = 66
    RULE_result = 67
    RULE_parameters = 68
    RULE_parameterDecl = 69
    RULE_expression = 70
    RULE_primaryExpr = 71
    RULE_conversion = 72
    RULE_nonNamedType = 73
    RULE_operand = 74
    RULE_literal = 75
    RULE_basicLit = 76
    RULE_integer = 77
    RULE_operandName = 78
    RULE_qualifiedIdent = 79
    RULE_compositeLit = 80
    RULE_literalType = 81
    RULE_literalValue = 82
    RULE_elementList = 83
    RULE_keyedElement = 84
    RULE_key = 85
    RULE_element = 86
    RULE_structType = 87
    RULE_fieldDecl = 88
    RULE_string_ = 89
    RULE_embeddedField = 90
    RULE_functionLit = 91
    RULE_index = 92
    RULE_slice_ = 93
    RULE_typeAssertion = 94
    RULE_arguments = 95
    RULE_methodExpr = 96
    RULE_receiverType = 97
    RULE_eos = 98

    ruleNames =  [ "sourceFile", "packageClause", "importDecl", "importSpec", 
                   "importPath", "declaration", "constDecl", "constSpec", 
                   "identifierList", "expressionList", "typeDecl", "typeSpec", 
                   "functionDecl", "methodDecl", "receiver", "varDecl", 
                   "varSpec", "block", "statementList", "statement", "simpleStmt", 
                   "expressionStmt", "sendStmt", "incDecStmt", "assignment", 
                   "assign_op", "shortVarDecl", "emptyStmt", "labeledStmt", 
                   "returnStmt", "breakStmt", "continueStmt", "gotoStmt", 
                   "fallthroughStmt", "deferStmt", "ifStmt", "switchStmt", 
                   "exprSwitchStmt", "exprCaseClause", "exprSwitchCase", 
                   "typeSwitchStmt", "typeSwitchGuard", "typeCaseClause", 
                   "typeSwitchCase", "typeList", "selectStmt", "commClause", 
                   "commCase", "recvStmt", "forStmt", "forClause", "rangeClause", 
                   "goStmt", "type_", "typeName", "typeLit", "arrayType", 
                   "arrayLength", "elementType", "pointerType", "interfaceType", 
                   "sliceType", "mapType", "channelType", "methodSpec", 
                   "functionType", "signature", "result", "parameters", 
                   "parameterDecl", "expression", "primaryExpr", "conversion", 
                   "nonNamedType", "operand", "literal", "basicLit", "integer", 
                   "operandName", "qualifiedIdent", "compositeLit", "literalType", 
                   "literalValue", "elementList", "keyedElement", "key", 
                   "element", "structType", "fieldDecl", "string_", "embeddedField", 
                   "functionLit", "index", "slice_", "typeAssertion", "arguments", 
                   "methodExpr", "receiverType", "eos" ]

    EOF = Token.EOF
    BREAK=1
    DEFAULT=2
    FUNC=3
    INTERFACE=4
    SELECT=5
    CASE=6
    DEFER=7
    GO=8
    MAP=9
    STRUCT=10
    CHAN=11
    ELSE=12
    GOTO=13
    PACKAGE=14
    SWITCH=15
    CONST=16
    FALLTHROUGH=17
    IF=18
    RANGE=19
    TYPE=20
    CONTINUE=21
    FOR=22
    IMPORT=23
    RETURN=24
    VAR=25
    NIL_LIT=26
    IDENTIFIER=27
    L_PAREN=28
    R_PAREN=29
    L_CURLY=30
    R_CURLY=31
    L_BRACKET=32
    R_BRACKET=33
    ASSIGN=34
    COMMA=35
    SEMI=36
    COLON=37
    DOT=38
    PLUS_PLUS=39
    MINUS_MINUS=40
    DECLARE_ASSIGN=41
    ELLIPSIS=42
    LOGICAL_OR=43
    LOGICAL_AND=44
    EQUALS=45
    NOT_EQUALS=46
    LESS=47
    LESS_OR_EQUALS=48
    GREATER=49
    GREATER_OR_EQUALS=50
    OR=51
    DIV=52
    MOD=53
    LSHIFT=54
    RSHIFT=55
    BIT_CLEAR=56
    EXCLAMATION=57
    PLUS=58
    MINUS=59
    CARET=60
    STAR=61
    AMPERSAND=62
    RECEIVE=63
    DECIMAL_LIT=64
    BINARY_LIT=65
    OCTAL_LIT=66
    HEX_LIT=67
    FLOAT_LIT=68
    DECIMAL_FLOAT_LIT=69
    HEX_FLOAT_LIT=70
    IMAGINARY_LIT=71
    RUNE_LIT=72
    BYTE_VALUE=73
    OCTAL_BYTE_VALUE=74
    HEX_BYTE_VALUE=75
    LITTLE_U_VALUE=76
    BIG_U_VALUE=77
    RAW_STRING_LIT=78
    INTERPRETED_STRING_LIT=79
    WS=80
    COMMENT=81
    TERMINATOR=82
    LINE_COMMENT=83
    WS_NLSEMI=84
    COMMENT_NLSEMI=85
    LINE_COMMENT_NLSEMI=86
    EOS=87
    OTHER=88

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageClause(self):
            return self.getTypedRuleContext(GoParser.PackageClauseContext,0)


        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def EOF(self):
            return self.getToken(GoParser.EOF, 0)

        def importDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ImportDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.ImportDeclContext,i)


        def functionDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.FunctionDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.FunctionDeclContext,i)


        def methodDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.MethodDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.MethodDeclContext,i)


        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(GoParser.DeclarationContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_sourceFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceFile" ):
                listener.enterSourceFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceFile" ):
                listener.exitSourceFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceFile" ):
                return visitor.visitSourceFile(self)
            else:
                return visitor.visitChildren(self)




    def sourceFile(self):

        localctx = GoParser.SourceFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.packageClause()
            self.state = 199
            self.eos()
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==23:
                self.state = 200
                self.importDecl()
                self.state = 201
                self.eos()
                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 34668552) != 0:
                self.state = 211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 208
                    self.functionDecl()
                    pass

                elif la_ == 2:
                    self.state = 209
                    self.methodDecl()
                    pass

                elif la_ == 3:
                    self.state = 210
                    self.declaration()
                    pass


                self.state = 213
                self.eos()
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 220
            self.match(GoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.packageName = None # Token

        def PACKAGE(self):
            return self.getToken(GoParser.PACKAGE, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_packageClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageClause" ):
                listener.enterPackageClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageClause" ):
                listener.exitPackageClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageClause" ):
                return visitor.visitPackageClause(self)
            else:
                return visitor.visitChildren(self)




    def packageClause(self):

        localctx = GoParser.PackageClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(GoParser.PACKAGE)
            self.state = 223
            localctx.packageName = self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(GoParser.IMPORT, 0)

        def importSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ImportSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.ImportSpecContext,i)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_importDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDecl" ):
                listener.enterImportDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDecl" ):
                listener.exitImportDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDecl" ):
                return visitor.visitImportDecl(self)
            else:
                return visitor.visitChildren(self)




    def importDecl(self):

        localctx = GoParser.ImportDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(GoParser.IMPORT)
            self.state = 237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 38, 78, 79]:
                self.state = 226
                self.importSpec()
                pass
            elif token in [28]:
                self.state = 227
                self.match(GoParser.L_PAREN)
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & 6755399441057793) != 0:
                    self.state = 228
                    self.importSpec()
                    self.state = 229
                    self.eos()
                    self.state = 235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 236
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.alias = None # Token

        def importPath(self):
            return self.getTypedRuleContext(GoParser.ImportPathContext,0)


        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_importSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportSpec" ):
                listener.enterImportSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportSpec" ):
                listener.exitImportSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportSpec" ):
                return visitor.visitImportSpec(self)
            else:
                return visitor.visitChildren(self)




    def importSpec(self):

        localctx = GoParser.ImportSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_importSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27 or _la==38:
                self.state = 239
                localctx.alias = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==27 or _la==38):
                    localctx.alias = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 242
            self.importPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_(self):
            return self.getTypedRuleContext(GoParser.String_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_importPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportPath" ):
                listener.enterImportPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportPath" ):
                listener.exitImportPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportPath" ):
                return visitor.visitImportPath(self)
            else:
                return visitor.visitChildren(self)




    def importPath(self):

        localctx = GoParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constDecl(self):
            return self.getTypedRuleContext(GoParser.ConstDeclContext,0)


        def typeDecl(self):
            return self.getTypedRuleContext(GoParser.TypeDeclContext,0)


        def varDecl(self):
            return self.getTypedRuleContext(GoParser.VarDeclContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = GoParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_declaration)
        try:
            self.state = 249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 246
                self.constDecl()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 247
                self.typeDecl()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 3)
                self.state = 248
                self.varDecl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(GoParser.CONST, 0)

        def constSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ConstSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.ConstSpecContext,i)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_constDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDecl" ):
                listener.enterConstDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDecl" ):
                listener.exitConstDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDecl" ):
                return visitor.visitConstDecl(self)
            else:
                return visitor.visitChildren(self)




    def constDecl(self):

        localctx = GoParser.ConstDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_constDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(GoParser.CONST)
            self.state = 263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 252
                self.constSpec()
                pass
            elif token in [28]:
                self.state = 253
                self.match(GoParser.L_PAREN)
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 254
                    self.constSpec()
                    self.state = 255
                    self.eos()
                    self.state = 261
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 262
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_constSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstSpec" ):
                listener.enterConstSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstSpec" ):
                listener.exitConstSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstSpec" ):
                return visitor.visitConstSpec(self)
            else:
                return visitor.visitChildren(self)




    def constSpec(self):

        localctx = GoParser.ConstSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_constSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.identifierList()
            self.state = 271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -6917529022943457768) != 0:
                    self.state = 266
                    self.type_()


                self.state = 269
                self.match(GoParser.ASSIGN)
                self.state = 270
                self.expressionList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.IDENTIFIER)
            else:
                return self.getToken(GoParser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = GoParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.match(GoParser.IDENTIFIER)
            self.state = 278
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 274
                    self.match(GoParser.COMMA)
                    self.state = 275
                    self.match(GoParser.IDENTIFIER) 
                self.state = 280
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = GoParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_expressionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.expression(0)
            self.state = 286
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 282
                    self.match(GoParser.COMMA)
                    self.state = 283
                    self.expression(0) 
                self.state = 288
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(GoParser.TYPE, 0)

        def typeSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeSpecContext,i)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_typeDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDecl" ):
                listener.enterTypeDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDecl" ):
                listener.exitTypeDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDecl" ):
                return visitor.visitTypeDecl(self)
            else:
                return visitor.visitChildren(self)




    def typeDecl(self):

        localctx = GoParser.TypeDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.match(GoParser.TYPE)
            self.state = 301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 290
                self.typeSpec()
                pass
            elif token in [28]:
                self.state = 291
                self.match(GoParser.L_PAREN)
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 292
                    self.typeSpec()
                    self.state = 293
                    self.eos()
                    self.state = 299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 300
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpec" ):
                listener.enterTypeSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpec" ):
                listener.exitTypeSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpec" ):
                return visitor.visitTypeSpec(self)
            else:
                return visitor.visitChildren(self)




    def typeSpec(self):

        localctx = GoParser.TypeSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typeSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.match(GoParser.IDENTIFIER)
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 304
                self.match(GoParser.ASSIGN)


            self.state = 307
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GoParser.FUNC, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def signature(self):
            return self.getTypedRuleContext(GoParser.SignatureContext,0)


        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_functionDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDecl" ):
                listener.enterFunctionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDecl" ):
                listener.exitFunctionDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDecl" ):
                return visitor.visitFunctionDecl(self)
            else:
                return visitor.visitChildren(self)




    def functionDecl(self):

        localctx = GoParser.FunctionDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_functionDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(GoParser.FUNC)
            self.state = 310
            self.match(GoParser.IDENTIFIER)

            self.state = 311
            self.signature()
            self.state = 313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 312
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GoParser.FUNC, 0)

        def receiver(self):
            return self.getTypedRuleContext(GoParser.ReceiverContext,0)


        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def signature(self):
            return self.getTypedRuleContext(GoParser.SignatureContext,0)


        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_methodDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDecl" ):
                listener.enterMethodDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDecl" ):
                listener.exitMethodDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDecl" ):
                return visitor.visitMethodDecl(self)
            else:
                return visitor.visitChildren(self)




    def methodDecl(self):

        localctx = GoParser.MethodDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_methodDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.match(GoParser.FUNC)
            self.state = 316
            self.receiver()
            self.state = 317
            self.match(GoParser.IDENTIFIER)

            self.state = 318
            self.signature()
            self.state = 320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 319
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(GoParser.ParametersContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_receiver

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiver" ):
                listener.enterReceiver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiver" ):
                listener.exitReceiver(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiver" ):
                return visitor.visitReceiver(self)
            else:
                return visitor.visitChildren(self)




    def receiver(self):

        localctx = GoParser.ReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_receiver)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(GoParser.VAR, 0)

        def varSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.VarSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.VarSpecContext,i)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_varDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDecl" ):
                listener.enterVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDecl" ):
                listener.exitVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDecl" ):
                return visitor.visitVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def varDecl(self):

        localctx = GoParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(GoParser.VAR)
            self.state = 336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 325
                self.varSpec()
                pass
            elif token in [28]:
                self.state = 326
                self.match(GoParser.L_PAREN)
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 327
                    self.varSpec()
                    self.state = 328
                    self.eos()
                    self.state = 334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 335
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_varSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSpec" ):
                listener.enterVarSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSpec" ):
                listener.exitVarSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarSpec" ):
                return visitor.visitVarSpec(self)
            else:
                return visitor.visitChildren(self)




    def varSpec(self):

        localctx = GoParser.VarSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_varSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.identifierList()
            self.state = 346
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 9, 10, 11, 27, 28, 32, 61, 63]:
                self.state = 339
                self.type_()
                self.state = 342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 340
                    self.match(GoParser.ASSIGN)
                    self.state = 341
                    self.expressionList()


                pass
            elif token in [34]:
                self.state = 344
                self.match(GoParser.ASSIGN)
                self.state = 345
                self.expressionList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def statementList(self):
            return self.getTypedRuleContext(GoParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = GoParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.match(GoParser.L_CURLY)
            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 349
                self.statementList()


            self.state = 352
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.StatementContext)
            else:
                return self.getTypedRuleContext(GoParser.StatementContext,i)


        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.SEMI)
            else:
                return self.getToken(GoParser.SEMI, i)

        def EOS(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.EOS)
            else:
                return self.getToken(GoParser.EOS, i)

        def getRuleIndex(self):
            return GoParser.RULE_statementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementList" ):
                listener.enterStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementList" ):
                listener.exitStatementList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementList" ):
                return visitor.visitStatementList(self)
            else:
                return visitor.visitChildren(self)




    def statementList(self):

        localctx = GoParser.StatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_statementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 361
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        self.state = 355
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==36:
                            self.state = 354
                            self.match(GoParser.SEMI)


                        pass

                    elif la_ == 2:
                        self.state = 358
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==87:
                            self.state = 357
                            self.match(GoParser.EOS)


                        pass

                    elif la_ == 3:
                        self.state = 360
                        if not self.closingBracket():
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.closingBracket()")
                        pass


                    self.state = 363
                    self.statement()
                    self.state = 364
                    self.eos()

                else:
                    raise NoViableAltException(self)
                self.state = 368 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(GoParser.DeclarationContext,0)


        def labeledStmt(self):
            return self.getTypedRuleContext(GoParser.LabeledStmtContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoParser.SimpleStmtContext,0)


        def goStmt(self):
            return self.getTypedRuleContext(GoParser.GoStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(GoParser.ReturnStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(GoParser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(GoParser.ContinueStmtContext,0)


        def gotoStmt(self):
            return self.getTypedRuleContext(GoParser.GotoStmtContext,0)


        def fallthroughStmt(self):
            return self.getTypedRuleContext(GoParser.FallthroughStmtContext,0)


        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(GoParser.IfStmtContext,0)


        def switchStmt(self):
            return self.getTypedRuleContext(GoParser.SwitchStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(GoParser.SelectStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(GoParser.ForStmtContext,0)


        def deferStmt(self):
            return self.getTypedRuleContext(GoParser.DeferStmtContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = GoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_statement)
        try:
            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 370
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 371
                self.labeledStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 372
                self.simpleStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 373
                self.goStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 374
                self.returnStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 375
                self.breakStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 376
                self.continueStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 377
                self.gotoStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 378
                self.fallthroughStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 379
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 380
                self.ifStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 381
                self.switchStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 382
                self.selectStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 383
                self.forStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 384
                self.deferStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sendStmt(self):
            return self.getTypedRuleContext(GoParser.SendStmtContext,0)


        def incDecStmt(self):
            return self.getTypedRuleContext(GoParser.IncDecStmtContext,0)


        def assignment(self):
            return self.getTypedRuleContext(GoParser.AssignmentContext,0)


        def expressionStmt(self):
            return self.getTypedRuleContext(GoParser.ExpressionStmtContext,0)


        def shortVarDecl(self):
            return self.getTypedRuleContext(GoParser.ShortVarDeclContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStmt" ):
                return visitor.visitSimpleStmt(self)
            else:
                return visitor.visitChildren(self)




    def simpleStmt(self):

        localctx = GoParser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_simpleStmt)
        try:
            self.state = 392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 387
                self.sendStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 388
                self.incDecStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 389
                self.assignment()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 390
                self.expressionStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 391
                self.shortVarDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_expressionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStmt" ):
                listener.enterExpressionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStmt" ):
                listener.exitExpressionStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStmt" ):
                return visitor.visitExpressionStmt(self)
            else:
                return visitor.visitChildren(self)




    def expressionStmt(self):

        localctx = GoParser.ExpressionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_expressionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.channel = None # ExpressionContext

        def RECEIVE(self):
            return self.getToken(GoParser.RECEIVE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_sendStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendStmt" ):
                listener.enterSendStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendStmt" ):
                listener.exitSendStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSendStmt" ):
                return visitor.visitSendStmt(self)
            else:
                return visitor.visitChildren(self)




    def sendStmt(self):

        localctx = GoParser.SendStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sendStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            localctx.channel = self.expression(0)
            self.state = 397
            self.match(GoParser.RECEIVE)
            self.state = 398
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncDecStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def PLUS_PLUS(self):
            return self.getToken(GoParser.PLUS_PLUS, 0)

        def MINUS_MINUS(self):
            return self.getToken(GoParser.MINUS_MINUS, 0)

        def getRuleIndex(self):
            return GoParser.RULE_incDecStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncDecStmt" ):
                listener.enterIncDecStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncDecStmt" ):
                listener.exitIncDecStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncDecStmt" ):
                return visitor.visitIncDecStmt(self)
            else:
                return visitor.visitChildren(self)




    def incDecStmt(self):

        localctx = GoParser.IncDecStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_incDecStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.expression(0)
            self.state = 401
            _la = self._input.LA(1)
            if not(_la==39 or _la==40):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionListContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionListContext,i)


        def assign_op(self):
            return self.getTypedRuleContext(GoParser.Assign_opContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = GoParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.expressionList()
            self.state = 404
            self.assign_op()
            self.state = 405
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def PLUS(self):
            return self.getToken(GoParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(GoParser.MINUS, 0)

        def OR(self):
            return self.getToken(GoParser.OR, 0)

        def CARET(self):
            return self.getToken(GoParser.CARET, 0)

        def STAR(self):
            return self.getToken(GoParser.STAR, 0)

        def DIV(self):
            return self.getToken(GoParser.DIV, 0)

        def MOD(self):
            return self.getToken(GoParser.MOD, 0)

        def LSHIFT(self):
            return self.getToken(GoParser.LSHIFT, 0)

        def RSHIFT(self):
            return self.getToken(GoParser.RSHIFT, 0)

        def AMPERSAND(self):
            return self.getToken(GoParser.AMPERSAND, 0)

        def BIT_CLEAR(self):
            return self.getToken(GoParser.BIT_CLEAR, 0)

        def getRuleIndex(self):
            return GoParser.RULE_assign_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_op" ):
                listener.enterAssign_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_op" ):
                listener.exitAssign_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_op" ):
                return visitor.visitAssign_op(self)
            else:
                return visitor.visitChildren(self)




    def assign_op(self):

        localctx = GoParser.Assign_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_assign_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 9077005048965234688) != 0:
                self.state = 407
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 9077005048965234688) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 410
            self.match(GoParser.ASSIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def DECLARE_ASSIGN(self):
            return self.getToken(GoParser.DECLARE_ASSIGN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_shortVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortVarDecl" ):
                listener.enterShortVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortVarDecl" ):
                listener.exitShortVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShortVarDecl" ):
                return visitor.visitShortVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def shortVarDecl(self):

        localctx = GoParser.ShortVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_shortVarDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.identifierList()
            self.state = 413
            self.match(GoParser.DECLARE_ASSIGN)
            self.state = 414
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOS(self):
            return self.getToken(GoParser.EOS, 0)

        def SEMI(self):
            return self.getToken(GoParser.SEMI, 0)

        def getRuleIndex(self):
            return GoParser.RULE_emptyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStmt" ):
                listener.enterEmptyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStmt" ):
                listener.exitEmptyStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStmt" ):
                return visitor.visitEmptyStmt(self)
            else:
                return visitor.visitChildren(self)




    def emptyStmt(self):

        localctx = GoParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_emptyStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            _la = self._input.LA(1)
            if not(_la==36 or _la==87):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(GoParser.StatementContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_labeledStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStmt" ):
                listener.enterLabeledStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStmt" ):
                listener.exitLabeledStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledStmt" ):
                return visitor.visitLabeledStmt(self)
            else:
                return visitor.visitChildren(self)




    def labeledStmt(self):

        localctx = GoParser.LabeledStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_labeledStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(GoParser.IDENTIFIER)
            self.state = 419
            self.match(GoParser.COLON)
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 420
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(GoParser.RETURN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = GoParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.match(GoParser.RETURN)
            self.state = 425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 424
                self.expressionList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(GoParser.BREAK, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStmt" ):
                return visitor.visitBreakStmt(self)
            else:
                return visitor.visitChildren(self)




    def breakStmt(self):

        localctx = GoParser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.match(GoParser.BREAK)
            self.state = 429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 428
                self.match(GoParser.IDENTIFIER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(GoParser.CONTINUE, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStmt" ):
                return visitor.visitContinueStmt(self)
            else:
                return visitor.visitChildren(self)




    def continueStmt(self):

        localctx = GoParser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(GoParser.CONTINUE)
            self.state = 433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 432
                self.match(GoParser.IDENTIFIER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotoStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(GoParser.GOTO, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_gotoStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStmt" ):
                listener.enterGotoStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStmt" ):
                listener.exitGotoStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGotoStmt" ):
                return visitor.visitGotoStmt(self)
            else:
                return visitor.visitChildren(self)




    def gotoStmt(self):

        localctx = GoParser.GotoStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_gotoStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(GoParser.GOTO)
            self.state = 436
            self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FallthroughStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FALLTHROUGH(self):
            return self.getToken(GoParser.FALLTHROUGH, 0)

        def getRuleIndex(self):
            return GoParser.RULE_fallthroughStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFallthroughStmt" ):
                listener.enterFallthroughStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFallthroughStmt" ):
                listener.exitFallthroughStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFallthroughStmt" ):
                return visitor.visitFallthroughStmt(self)
            else:
                return visitor.visitChildren(self)




    def fallthroughStmt(self):

        localctx = GoParser.FallthroughStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_fallthroughStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(GoParser.FALLTHROUGH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeferStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFER(self):
            return self.getToken(GoParser.DEFER, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_deferStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeferStmt" ):
                listener.enterDeferStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeferStmt" ):
                listener.exitDeferStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeferStmt" ):
                return visitor.visitDeferStmt(self)
            else:
                return visitor.visitChildren(self)




    def deferStmt(self):

        localctx = GoParser.DeferStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_deferStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(GoParser.DEFER)
            self.state = 441
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(GoParser.IF, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.BlockContext)
            else:
                return self.getTypedRuleContext(GoParser.BlockContext,i)


        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def eos(self):
            return self.getTypedRuleContext(GoParser.EosContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoParser.SimpleStmtContext,0)


        def ELSE(self):
            return self.getToken(GoParser.ELSE, 0)

        def ifStmt(self):
            return self.getTypedRuleContext(GoParser.IfStmtContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = GoParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(GoParser.IF)
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 444
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 445
                self.eos()
                self.state = 446
                self.expression(0)
                pass

            elif la_ == 3:
                self.state = 448
                self.simpleStmt()
                self.state = 449
                self.eos()
                self.state = 450
                self.expression(0)
                pass


            self.state = 454
            self.block()
            self.state = 460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 455
                self.match(GoParser.ELSE)
                self.state = 458
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [18]:
                    self.state = 456
                    self.ifStmt()
                    pass
                elif token in [30]:
                    self.state = 457
                    self.block()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprSwitchStmt(self):
            return self.getTypedRuleContext(GoParser.ExprSwitchStmtContext,0)


        def typeSwitchStmt(self):
            return self.getTypedRuleContext(GoParser.TypeSwitchStmtContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_switchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStmt" ):
                listener.enterSwitchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStmt" ):
                listener.exitSwitchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStmt" ):
                return visitor.visitSwitchStmt(self)
            else:
                return visitor.visitChildren(self)




    def switchStmt(self):

        localctx = GoParser.SwitchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_switchStmt)
        try:
            self.state = 464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 462
                self.exprSwitchStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.typeSwitchStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprSwitchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(GoParser.SWITCH, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def eos(self):
            return self.getTypedRuleContext(GoParser.EosContext,0)


        def exprCaseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExprCaseClauseContext)
            else:
                return self.getTypedRuleContext(GoParser.ExprCaseClauseContext,i)


        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoParser.SimpleStmtContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_exprSwitchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprSwitchStmt" ):
                listener.enterExprSwitchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprSwitchStmt" ):
                listener.exitExprSwitchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprSwitchStmt" ):
                return visitor.visitExprSwitchStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprSwitchStmt(self):

        localctx = GoParser.ExprSwitchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_exprSwitchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(GoParser.SWITCH)
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -144115183311122920) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 49567) != 0:
                    self.state = 467
                    self.expression(0)


                pass

            elif la_ == 2:
                self.state = 471
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 470
                    self.simpleStmt()


                self.state = 473
                self.eos()
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -144115183311122920) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 49567) != 0:
                    self.state = 474
                    self.expression(0)


                pass


            self.state = 479
            self.match(GoParser.L_CURLY)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==6:
                self.state = 480
                self.exprCaseClause()
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 486
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprCaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprSwitchCase(self):
            return self.getTypedRuleContext(GoParser.ExprSwitchCaseContext,0)


        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def statementList(self):
            return self.getTypedRuleContext(GoParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_exprCaseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprCaseClause" ):
                listener.enterExprCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprCaseClause" ):
                listener.exitExprCaseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprCaseClause" ):
                return visitor.visitExprCaseClause(self)
            else:
                return visitor.visitChildren(self)




    def exprCaseClause(self):

        localctx = GoParser.ExprCaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_exprCaseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.exprSwitchCase()
            self.state = 489
            self.match(GoParser.COLON)
            self.state = 491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 490
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprSwitchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(GoParser.CASE, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def DEFAULT(self):
            return self.getToken(GoParser.DEFAULT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_exprSwitchCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprSwitchCase" ):
                listener.enterExprSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprSwitchCase" ):
                listener.exitExprSwitchCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprSwitchCase" ):
                return visitor.visitExprSwitchCase(self)
            else:
                return visitor.visitChildren(self)




    def exprSwitchCase(self):

        localctx = GoParser.ExprSwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_exprSwitchCase)
        try:
            self.state = 496
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self.match(GoParser.CASE)
                self.state = 494
                self.expressionList()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.match(GoParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSwitchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(GoParser.SWITCH, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def typeSwitchGuard(self):
            return self.getTypedRuleContext(GoParser.TypeSwitchGuardContext,0)


        def eos(self):
            return self.getTypedRuleContext(GoParser.EosContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoParser.SimpleStmtContext,0)


        def typeCaseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeCaseClauseContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeCaseClauseContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_typeSwitchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSwitchStmt" ):
                listener.enterTypeSwitchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSwitchStmt" ):
                listener.exitTypeSwitchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSwitchStmt" ):
                return visitor.visitTypeSwitchStmt(self)
            else:
                return visitor.visitChildren(self)




    def typeSwitchStmt(self):

        localctx = GoParser.TypeSwitchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_typeSwitchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(GoParser.SWITCH)
            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 499
                self.typeSwitchGuard()
                pass

            elif la_ == 2:
                self.state = 500
                self.eos()
                self.state = 501
                self.typeSwitchGuard()
                pass

            elif la_ == 3:
                self.state = 503
                self.simpleStmt()
                self.state = 504
                self.eos()
                self.state = 505
                self.typeSwitchGuard()
                pass


            self.state = 509
            self.match(GoParser.L_CURLY)
            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==6:
                self.state = 510
                self.typeCaseClause()
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 516
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSwitchGuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpr(self):
            return self.getTypedRuleContext(GoParser.PrimaryExprContext,0)


        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def TYPE(self):
            return self.getToken(GoParser.TYPE, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def DECLARE_ASSIGN(self):
            return self.getToken(GoParser.DECLARE_ASSIGN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeSwitchGuard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSwitchGuard" ):
                listener.enterTypeSwitchGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSwitchGuard" ):
                listener.exitTypeSwitchGuard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSwitchGuard" ):
                return visitor.visitTypeSwitchGuard(self)
            else:
                return visitor.visitChildren(self)




    def typeSwitchGuard(self):

        localctx = GoParser.TypeSwitchGuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_typeSwitchGuard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 518
                self.match(GoParser.IDENTIFIER)
                self.state = 519
                self.match(GoParser.DECLARE_ASSIGN)


            self.state = 522
            self.primaryExpr(0)
            self.state = 523
            self.match(GoParser.DOT)
            self.state = 524
            self.match(GoParser.L_PAREN)
            self.state = 525
            self.match(GoParser.TYPE)
            self.state = 526
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeCaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSwitchCase(self):
            return self.getTypedRuleContext(GoParser.TypeSwitchCaseContext,0)


        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def statementList(self):
            return self.getTypedRuleContext(GoParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_typeCaseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeCaseClause" ):
                listener.enterTypeCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeCaseClause" ):
                listener.exitTypeCaseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeCaseClause" ):
                return visitor.visitTypeCaseClause(self)
            else:
                return visitor.visitChildren(self)




    def typeCaseClause(self):

        localctx = GoParser.TypeCaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_typeCaseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.typeSwitchCase()
            self.state = 529
            self.match(GoParser.COLON)
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 530
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSwitchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(GoParser.CASE, 0)

        def typeList(self):
            return self.getTypedRuleContext(GoParser.TypeListContext,0)


        def DEFAULT(self):
            return self.getToken(GoParser.DEFAULT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeSwitchCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSwitchCase" ):
                listener.enterTypeSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSwitchCase" ):
                listener.exitTypeSwitchCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSwitchCase" ):
                return visitor.visitTypeSwitchCase(self)
            else:
                return visitor.visitChildren(self)




    def typeSwitchCase(self):

        localctx = GoParser.TypeSwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typeSwitchCase)
        try:
            self.state = 536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 533
                self.match(GoParser.CASE)
                self.state = 534
                self.typeList()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 535
                self.match(GoParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.Type_Context)
            else:
                return self.getTypedRuleContext(GoParser.Type_Context,i)


        def NIL_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.NIL_LIT)
            else:
                return self.getToken(GoParser.NIL_LIT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeList" ):
                return visitor.visitTypeList(self)
            else:
                return visitor.visitChildren(self)




    def typeList(self):

        localctx = GoParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 9, 10, 11, 27, 28, 32, 61, 63]:
                self.state = 538
                self.type_()
                pass
            elif token in [26]:
                self.state = 539
                self.match(GoParser.NIL_LIT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==35:
                self.state = 542
                self.match(GoParser.COMMA)
                self.state = 545
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 4, 9, 10, 11, 27, 28, 32, 61, 63]:
                    self.state = 543
                    self.type_()
                    pass
                elif token in [26]:
                    self.state = 544
                    self.match(GoParser.NIL_LIT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(GoParser.SELECT, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def commClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.CommClauseContext)
            else:
                return self.getTypedRuleContext(GoParser.CommClauseContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_selectStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStmt" ):
                listener.enterSelectStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStmt" ):
                listener.exitSelectStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = GoParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(GoParser.SELECT)
            self.state = 553
            self.match(GoParser.L_CURLY)
            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==6:
                self.state = 554
                self.commClause()
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 560
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commCase(self):
            return self.getTypedRuleContext(GoParser.CommCaseContext,0)


        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def statementList(self):
            return self.getTypedRuleContext(GoParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_commClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommClause" ):
                listener.enterCommClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommClause" ):
                listener.exitCommClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommClause" ):
                return visitor.visitCommClause(self)
            else:
                return visitor.visitChildren(self)




    def commClause(self):

        localctx = GoParser.CommClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_commClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.commCase()
            self.state = 563
            self.match(GoParser.COLON)
            self.state = 565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 564
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(GoParser.CASE, 0)

        def sendStmt(self):
            return self.getTypedRuleContext(GoParser.SendStmtContext,0)


        def recvStmt(self):
            return self.getTypedRuleContext(GoParser.RecvStmtContext,0)


        def DEFAULT(self):
            return self.getToken(GoParser.DEFAULT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_commCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommCase" ):
                listener.enterCommCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommCase" ):
                listener.exitCommCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommCase" ):
                return visitor.visitCommCase(self)
            else:
                return visitor.visitChildren(self)




    def commCase(self):

        localctx = GoParser.CommCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_commCase)
        try:
            self.state = 573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 567
                self.match(GoParser.CASE)
                self.state = 570
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 568
                    self.sendStmt()
                    pass

                elif la_ == 2:
                    self.state = 569
                    self.recvStmt()
                    pass


                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.match(GoParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecvStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.recvExpr = None # ExpressionContext

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def DECLARE_ASSIGN(self):
            return self.getToken(GoParser.DECLARE_ASSIGN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_recvStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecvStmt" ):
                listener.enterRecvStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecvStmt" ):
                listener.exitRecvStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecvStmt" ):
                return visitor.visitRecvStmt(self)
            else:
                return visitor.visitChildren(self)




    def recvStmt(self):

        localctx = GoParser.RecvStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_recvStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 575
                self.expressionList()
                self.state = 576
                self.match(GoParser.ASSIGN)

            elif la_ == 2:
                self.state = 578
                self.identifierList()
                self.state = 579
                self.match(GoParser.DECLARE_ASSIGN)


            self.state = 583
            localctx.recvExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(GoParser.FOR, 0)

        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def forClause(self):
            return self.getTypedRuleContext(GoParser.ForClauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def rangeClause(self):
            return self.getTypedRuleContext(GoParser.RangeClauseContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = GoParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(GoParser.FOR)
            self.state = 593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -144115183311122920) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 49567) != 0:
                    self.state = 586
                    self.expression(0)


                pass

            elif la_ == 2:
                self.state = 589
                self.forClause()
                pass

            elif la_ == 3:
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -144115183310598632) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 49567) != 0:
                    self.state = 590
                    self.rangeClause()


                pass


            self.state = 595
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initStmt = None # SimpleStmtContext
            self.postStmt = None # SimpleStmtContext

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def simpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(GoParser.SimpleStmtContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_forClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForClause" ):
                listener.enterForClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForClause" ):
                listener.exitForClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForClause" ):
                return visitor.visitForClause(self)
            else:
                return visitor.visitChildren(self)




    def forClause(self):

        localctx = GoParser.ForClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_forClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 597
                localctx.initStmt = self.simpleStmt()


            self.state = 600
            self.eos()
            self.state = 602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 601
                self.expression(0)


            self.state = 604
            self.eos()
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -144115183311122920) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 49567) != 0:
                self.state = 605
                localctx.postStmt = self.simpleStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(GoParser.RANGE, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def DECLARE_ASSIGN(self):
            return self.getToken(GoParser.DECLARE_ASSIGN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_rangeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeClause" ):
                listener.enterRangeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeClause" ):
                listener.exitRangeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeClause" ):
                return visitor.visitRangeClause(self)
            else:
                return visitor.visitChildren(self)




    def rangeClause(self):

        localctx = GoParser.RangeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_rangeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 608
                self.expressionList()
                self.state = 609
                self.match(GoParser.ASSIGN)

            elif la_ == 2:
                self.state = 611
                self.identifierList()
                self.state = 612
                self.match(GoParser.DECLARE_ASSIGN)


            self.state = 616
            self.match(GoParser.RANGE)
            self.state = 617
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GO(self):
            return self.getToken(GoParser.GO, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_goStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoStmt" ):
                listener.enterGoStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoStmt" ):
                listener.exitGoStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoStmt" ):
                return visitor.visitGoStmt(self)
            else:
                return visitor.visitChildren(self)




    def goStmt(self):

        localctx = GoParser.GoStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_goStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(GoParser.GO)
            self.state = 620
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(GoParser.TypeNameContext,0)


        def typeLit(self):
            return self.getTypedRuleContext(GoParser.TypeLitContext,0)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_" ):
                return visitor.visitType_(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = GoParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_type_)
        try:
            self.state = 628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 622
                self.typeName()
                pass
            elif token in [3, 4, 9, 10, 11, 32, 61, 63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 623
                self.typeLit()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 3)
                self.state = 624
                self.match(GoParser.L_PAREN)
                self.state = 625
                self.type_()
                self.state = 626
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdent(self):
            return self.getTypedRuleContext(GoParser.QualifiedIdentContext,0)


        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = GoParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_typeName)
        try:
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.qualifiedIdent()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 631
                self.match(GoParser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayType(self):
            return self.getTypedRuleContext(GoParser.ArrayTypeContext,0)


        def structType(self):
            return self.getTypedRuleContext(GoParser.StructTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(GoParser.PointerTypeContext,0)


        def functionType(self):
            return self.getTypedRuleContext(GoParser.FunctionTypeContext,0)


        def interfaceType(self):
            return self.getTypedRuleContext(GoParser.InterfaceTypeContext,0)


        def sliceType(self):
            return self.getTypedRuleContext(GoParser.SliceTypeContext,0)


        def mapType(self):
            return self.getTypedRuleContext(GoParser.MapTypeContext,0)


        def channelType(self):
            return self.getTypedRuleContext(GoParser.ChannelTypeContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_typeLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeLit" ):
                listener.enterTypeLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeLit" ):
                listener.exitTypeLit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeLit" ):
                return visitor.visitTypeLit(self)
            else:
                return visitor.visitChildren(self)




    def typeLit(self):

        localctx = GoParser.TypeLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_typeLit)
        try:
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 634
                self.arrayType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 635
                self.structType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 636
                self.pointerType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 637
                self.functionType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 638
                self.interfaceType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 639
                self.sliceType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 640
                self.mapType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 641
                self.channelType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def arrayLength(self):
            return self.getTypedRuleContext(GoParser.ArrayLengthContext,0)


        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = GoParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(GoParser.L_BRACKET)
            self.state = 645
            self.arrayLength()
            self.state = 646
            self.match(GoParser.R_BRACKET)
            self.state = 647
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_arrayLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLength" ):
                listener.enterArrayLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLength" ):
                listener.exitArrayLength(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLength" ):
                return visitor.visitArrayLength(self)
            else:
                return visitor.visitChildren(self)




    def arrayLength(self):

        localctx = GoParser.ArrayLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_arrayLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_elementType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementType" ):
                listener.enterElementType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementType" ):
                listener.exitElementType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementType" ):
                return visitor.visitElementType(self)
            else:
                return visitor.visitChildren(self)




    def elementType(self):

        localctx = GoParser.ElementTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_elementType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(GoParser.STAR, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = GoParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_pointerType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(GoParser.STAR)
            self.state = 654
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(GoParser.INTERFACE, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def methodSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.MethodSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.MethodSpecContext,i)


        def typeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeNameContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeNameContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_interfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceType" ):
                listener.enterInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceType" ):
                listener.exitInterfaceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceType" ):
                return visitor.visitInterfaceType(self)
            else:
                return visitor.visitChildren(self)




    def interfaceType(self):

        localctx = GoParser.InterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_interfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(GoParser.INTERFACE)
            self.state = 657
            self.match(GoParser.L_CURLY)
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 658
                    self.methodSpec()
                    pass

                elif la_ == 2:
                    self.state = 659
                    self.typeName()
                    pass


                self.state = 662
                self.eos()
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 669
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_sliceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceType" ):
                listener.enterSliceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceType" ):
                listener.exitSliceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceType" ):
                return visitor.visitSliceType(self)
            else:
                return visitor.visitChildren(self)




    def sliceType(self):

        localctx = GoParser.SliceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_sliceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(GoParser.L_BRACKET)
            self.state = 672
            self.match(GoParser.R_BRACKET)
            self.state = 673
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(GoParser.MAP, 0)

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_mapType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapType" ):
                listener.enterMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapType" ):
                listener.exitMapType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapType" ):
                return visitor.visitMapType(self)
            else:
                return visitor.visitChildren(self)




    def mapType(self):

        localctx = GoParser.MapTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_mapType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(GoParser.MAP)
            self.state = 676
            self.match(GoParser.L_BRACKET)
            self.state = 677
            self.type_()
            self.state = 678
            self.match(GoParser.R_BRACKET)
            self.state = 679
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChannelTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def CHAN(self):
            return self.getToken(GoParser.CHAN, 0)

        def RECEIVE(self):
            return self.getToken(GoParser.RECEIVE, 0)

        def getRuleIndex(self):
            return GoParser.RULE_channelType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelType" ):
                listener.enterChannelType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelType" ):
                listener.exitChannelType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChannelType" ):
                return visitor.visitChannelType(self)
            else:
                return visitor.visitChildren(self)




    def channelType(self):

        localctx = GoParser.ChannelTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_channelType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 681
                self.match(GoParser.CHAN)
                pass

            elif la_ == 2:
                self.state = 682
                self.match(GoParser.CHAN)
                self.state = 683
                self.match(GoParser.RECEIVE)
                pass

            elif la_ == 3:
                self.state = 684
                self.match(GoParser.RECEIVE)
                self.state = 685
                self.match(GoParser.CHAN)
                pass


            self.state = 688
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def parameters(self):
            return self.getTypedRuleContext(GoParser.ParametersContext,0)


        def result(self):
            return self.getTypedRuleContext(GoParser.ResultContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_methodSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodSpec" ):
                listener.enterMethodSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodSpec" ):
                listener.exitMethodSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodSpec" ):
                return visitor.visitMethodSpec(self)
            else:
                return visitor.visitChildren(self)




    def methodSpec(self):

        localctx = GoParser.MethodSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_methodSpec)
        try:
            self.state = 696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 690
                self.match(GoParser.IDENTIFIER)
                self.state = 691
                self.parameters()
                self.state = 692
                self.result()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 694
                self.match(GoParser.IDENTIFIER)
                self.state = 695
                self.parameters()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GoParser.FUNC, 0)

        def signature(self):
            return self.getTypedRuleContext(GoParser.SignatureContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionType" ):
                return visitor.visitFunctionType(self)
            else:
                return visitor.visitChildren(self)




    def functionType(self):

        localctx = GoParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_functionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(GoParser.FUNC)
            self.state = 699
            self.signature()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(GoParser.ParametersContext,0)


        def result(self):
            return self.getTypedRuleContext(GoParser.ResultContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignature" ):
                listener.enterSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignature" ):
                listener.exitSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSignature" ):
                return visitor.visitSignature(self)
            else:
                return visitor.visitChildren(self)




    def signature(self):

        localctx = GoParser.SignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_signature)
        try:
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 701
                self.parameters()
                self.state = 702
                self.result()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 704
                self.parameters()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(GoParser.ParametersContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult" ):
                listener.enterResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult" ):
                listener.exitResult(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult" ):
                return visitor.visitResult(self)
            else:
                return visitor.visitChildren(self)




    def result(self):

        localctx = GoParser.ResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_result)
        try:
            self.state = 709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 707
                self.parameters()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 708
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def parameterDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ParameterDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.ParameterDeclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = GoParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(GoParser.L_PAREN)
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -6917524624896946664) != 0:
                self.state = 712
                self.parameterDecl()
                self.state = 717
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 713
                        self.match(GoParser.COMMA)
                        self.state = 714
                        self.parameterDecl() 
                    self.state = 719
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 720
                    self.match(GoParser.COMMA)




            self.state = 725
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def ELLIPSIS(self):
            return self.getToken(GoParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return GoParser.RULE_parameterDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDecl" ):
                listener.enterParameterDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDecl" ):
                listener.exitParameterDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDecl" ):
                return visitor.visitParameterDecl(self)
            else:
                return visitor.visitChildren(self)




    def parameterDecl(self):

        localctx = GoParser.ParameterDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_parameterDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 727
                self.identifierList()


            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 730
                self.match(GoParser.ELLIPSIS)


            self.state = 733
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unary_op = None # Token
            self.mul_op = None # Token
            self.add_op = None # Token
            self.rel_op = None # Token

        def primaryExpr(self):
            return self.getTypedRuleContext(GoParser.PrimaryExprContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionContext,i)


        def PLUS(self):
            return self.getToken(GoParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(GoParser.MINUS, 0)

        def EXCLAMATION(self):
            return self.getToken(GoParser.EXCLAMATION, 0)

        def CARET(self):
            return self.getToken(GoParser.CARET, 0)

        def STAR(self):
            return self.getToken(GoParser.STAR, 0)

        def AMPERSAND(self):
            return self.getToken(GoParser.AMPERSAND, 0)

        def RECEIVE(self):
            return self.getToken(GoParser.RECEIVE, 0)

        def DIV(self):
            return self.getToken(GoParser.DIV, 0)

        def MOD(self):
            return self.getToken(GoParser.MOD, 0)

        def LSHIFT(self):
            return self.getToken(GoParser.LSHIFT, 0)

        def RSHIFT(self):
            return self.getToken(GoParser.RSHIFT, 0)

        def BIT_CLEAR(self):
            return self.getToken(GoParser.BIT_CLEAR, 0)

        def OR(self):
            return self.getToken(GoParser.OR, 0)

        def EQUALS(self):
            return self.getToken(GoParser.EQUALS, 0)

        def NOT_EQUALS(self):
            return self.getToken(GoParser.NOT_EQUALS, 0)

        def LESS(self):
            return self.getToken(GoParser.LESS, 0)

        def LESS_OR_EQUALS(self):
            return self.getToken(GoParser.LESS_OR_EQUALS, 0)

        def GREATER(self):
            return self.getToken(GoParser.GREATER, 0)

        def GREATER_OR_EQUALS(self):
            return self.getToken(GoParser.GREATER_OR_EQUALS, 0)

        def LOGICAL_AND(self):
            return self.getToken(GoParser.LOGICAL_AND, 0)

        def LOGICAL_OR(self):
            return self.getToken(GoParser.LOGICAL_OR, 0)

        def getRuleIndex(self):
            return GoParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GoParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 736
                self.primaryExpr(0)
                pass

            elif la_ == 2:
                self.state = 737
                localctx.unary_op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & -144115188075855872) != 0):
                    localctx.unary_op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 738
                self.expression(6)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 758
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 756
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                    if la_ == 1:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 741
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 742
                        localctx.mul_op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 7057140616089567232) != 0):
                            localctx.mul_op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 743
                        self.expression(6)
                        pass

                    elif la_ == 2:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 744
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 745
                        localctx.add_op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 2019864432875667456) != 0):
                            localctx.add_op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 746
                        self.expression(5)
                        pass

                    elif la_ == 3:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 747
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 748
                        localctx.rel_op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 2216615441596416) != 0):
                            localctx.rel_op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 749
                        self.expression(4)
                        pass

                    elif la_ == 4:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 750
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 751
                        self.match(GoParser.LOGICAL_AND)
                        self.state = 752
                        self.expression(3)
                        pass

                    elif la_ == 5:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 753
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 754
                        self.match(GoParser.LOGICAL_OR)
                        self.state = 755
                        self.expression(2)
                        pass

             
                self.state = 760
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operand(self):
            return self.getTypedRuleContext(GoParser.OperandContext,0)


        def conversion(self):
            return self.getTypedRuleContext(GoParser.ConversionContext,0)


        def methodExpr(self):
            return self.getTypedRuleContext(GoParser.MethodExprContext,0)


        def primaryExpr(self):
            return self.getTypedRuleContext(GoParser.PrimaryExprContext,0)


        def index(self):
            return self.getTypedRuleContext(GoParser.IndexContext,0)


        def slice_(self):
            return self.getTypedRuleContext(GoParser.Slice_Context,0)


        def typeAssertion(self):
            return self.getTypedRuleContext(GoParser.TypeAssertionContext,0)


        def arguments(self):
            return self.getTypedRuleContext(GoParser.ArgumentsContext,0)


        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_primaryExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpr" ):
                listener.enterPrimaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpr" ):
                listener.exitPrimaryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpr" ):
                return visitor.visitPrimaryExpr(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GoParser.PrimaryExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 142
        self.enterRecursionRule(localctx, 142, self.RULE_primaryExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 762
                self.operand()
                pass

            elif la_ == 2:
                self.state = 763
                self.conversion()
                pass

            elif la_ == 3:
                self.state = 764
                self.methodExpr()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 778
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = GoParser.PrimaryExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpr)
                    self.state = 767
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 774
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        self.state = 768
                        self.match(GoParser.DOT)
                        self.state = 769
                        self.match(GoParser.IDENTIFIER)
                        pass

                    elif la_ == 2:
                        self.state = 770
                        self.index()
                        pass

                    elif la_ == 3:
                        self.state = 771
                        self.slice_()
                        pass

                    elif la_ == 4:
                        self.state = 772
                        self.typeAssertion()
                        pass

                    elif la_ == 5:
                        self.state = 773
                        self.arguments()
                        pass

             
                self.state = 780
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonNamedType(self):
            return self.getTypedRuleContext(GoParser.NonNamedTypeContext,0)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def COMMA(self):
            return self.getToken(GoParser.COMMA, 0)

        def getRuleIndex(self):
            return GoParser.RULE_conversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion" ):
                listener.enterConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion" ):
                listener.exitConversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversion" ):
                return visitor.visitConversion(self)
            else:
                return visitor.visitChildren(self)




    def conversion(self):

        localctx = GoParser.ConversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_conversion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.nonNamedType()
            self.state = 782
            self.match(GoParser.L_PAREN)
            self.state = 783
            self.expression(0)
            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 784
                self.match(GoParser.COMMA)


            self.state = 787
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonNamedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeLit(self):
            return self.getTypedRuleContext(GoParser.TypeLitContext,0)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def nonNamedType(self):
            return self.getTypedRuleContext(GoParser.NonNamedTypeContext,0)


        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_nonNamedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonNamedType" ):
                listener.enterNonNamedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonNamedType" ):
                listener.exitNonNamedType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonNamedType" ):
                return visitor.visitNonNamedType(self)
            else:
                return visitor.visitChildren(self)




    def nonNamedType(self):

        localctx = GoParser.NonNamedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_nonNamedType)
        try:
            self.state = 794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 9, 10, 11, 32, 61, 63]:
                self.enterOuterAlt(localctx, 1)
                self.state = 789
                self.typeLit()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 790
                self.match(GoParser.L_PAREN)
                self.state = 791
                self.nonNamedType()
                self.state = 792
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(GoParser.LiteralContext,0)


        def operandName(self):
            return self.getTypedRuleContext(GoParser.OperandNameContext,0)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_operand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperand" ):
                listener.enterOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperand" ):
                listener.exitOperand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperand" ):
                return visitor.visitOperand(self)
            else:
                return visitor.visitChildren(self)




    def operand(self):

        localctx = GoParser.OperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_operand)
        try:
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.operandName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 798
                self.match(GoParser.L_PAREN)
                self.state = 799
                self.expression(0)
                self.state = 800
                self.match(GoParser.R_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicLit(self):
            return self.getTypedRuleContext(GoParser.BasicLitContext,0)


        def compositeLit(self):
            return self.getTypedRuleContext(GoParser.CompositeLitContext,0)


        def functionLit(self):
            return self.getTypedRuleContext(GoParser.FunctionLitContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = GoParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_literal)
        try:
            self.state = 807
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26, 64, 65, 66, 67, 68, 71, 72, 78, 79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 804
                self.basicLit()
                pass
            elif token in [9, 10, 27, 32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                self.compositeLit()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 806
                self.functionLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NIL_LIT(self):
            return self.getToken(GoParser.NIL_LIT, 0)

        def integer(self):
            return self.getTypedRuleContext(GoParser.IntegerContext,0)


        def string_(self):
            return self.getTypedRuleContext(GoParser.String_Context,0)


        def FLOAT_LIT(self):
            return self.getToken(GoParser.FLOAT_LIT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_basicLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicLit" ):
                listener.enterBasicLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicLit" ):
                listener.exitBasicLit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicLit" ):
                return visitor.visitBasicLit(self)
            else:
                return visitor.visitChildren(self)




    def basicLit(self):

        localctx = GoParser.BasicLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_basicLit)
        try:
            self.state = 813
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 809
                self.match(GoParser.NIL_LIT)
                pass
            elif token in [64, 65, 66, 67, 71, 72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.integer()
                pass
            elif token in [78, 79]:
                self.enterOuterAlt(localctx, 3)
                self.state = 811
                self.string_()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 812
                self.match(GoParser.FLOAT_LIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LIT(self):
            return self.getToken(GoParser.DECIMAL_LIT, 0)

        def BINARY_LIT(self):
            return self.getToken(GoParser.BINARY_LIT, 0)

        def OCTAL_LIT(self):
            return self.getToken(GoParser.OCTAL_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(GoParser.HEX_LIT, 0)

        def IMAGINARY_LIT(self):
            return self.getToken(GoParser.IMAGINARY_LIT, 0)

        def RUNE_LIT(self):
            return self.getToken(GoParser.RUNE_LIT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = GoParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            _la = self._input.LA(1)
            if not((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 399) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_operandName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperandName" ):
                listener.enterOperandName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperandName" ):
                listener.exitOperandName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperandName" ):
                return visitor.visitOperandName(self)
            else:
                return visitor.visitChildren(self)




    def operandName(self):

        localctx = GoParser.OperandNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_operandName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.IDENTIFIER)
            else:
                return self.getToken(GoParser.IDENTIFIER, i)

        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_qualifiedIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdent" ):
                listener.enterQualifiedIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdent" ):
                listener.exitQualifiedIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedIdent" ):
                return visitor.visitQualifiedIdent(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedIdent(self):

        localctx = GoParser.QualifiedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_qualifiedIdent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(GoParser.IDENTIFIER)
            self.state = 820
            self.match(GoParser.DOT)
            self.state = 821
            self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompositeLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literalType(self):
            return self.getTypedRuleContext(GoParser.LiteralTypeContext,0)


        def literalValue(self):
            return self.getTypedRuleContext(GoParser.LiteralValueContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_compositeLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompositeLit" ):
                listener.enterCompositeLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompositeLit" ):
                listener.exitCompositeLit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompositeLit" ):
                return visitor.visitCompositeLit(self)
            else:
                return visitor.visitChildren(self)




    def compositeLit(self):

        localctx = GoParser.CompositeLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_compositeLit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.literalType()
            self.state = 824
            self.literalValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structType(self):
            return self.getTypedRuleContext(GoParser.StructTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(GoParser.ArrayTypeContext,0)


        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def ELLIPSIS(self):
            return self.getToken(GoParser.ELLIPSIS, 0)

        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def sliceType(self):
            return self.getTypedRuleContext(GoParser.SliceTypeContext,0)


        def mapType(self):
            return self.getTypedRuleContext(GoParser.MapTypeContext,0)


        def typeName(self):
            return self.getTypedRuleContext(GoParser.TypeNameContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_literalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralType" ):
                listener.enterLiteralType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralType" ):
                listener.exitLiteralType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralType" ):
                return visitor.visitLiteralType(self)
            else:
                return visitor.visitChildren(self)




    def literalType(self):

        localctx = GoParser.LiteralTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_literalType)
        try:
            self.state = 835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 826
                self.structType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 827
                self.arrayType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 828
                self.match(GoParser.L_BRACKET)
                self.state = 829
                self.match(GoParser.ELLIPSIS)
                self.state = 830
                self.match(GoParser.R_BRACKET)
                self.state = 831
                self.elementType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 832
                self.sliceType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 833
                self.mapType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 834
                self.typeName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def elementList(self):
            return self.getTypedRuleContext(GoParser.ElementListContext,0)


        def COMMA(self):
            return self.getToken(GoParser.COMMA, 0)

        def getRuleIndex(self):
            return GoParser.RULE_literalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralValue" ):
                listener.enterLiteralValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralValue" ):
                listener.exitLiteralValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralValue" ):
                return visitor.visitLiteralValue(self)
            else:
                return visitor.visitChildren(self)




    def literalValue(self):

        localctx = GoParser.LiteralValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_literalValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(GoParser.L_CURLY)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -144115182237381096) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 49567) != 0:
                self.state = 838
                self.elementList()
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 839
                    self.match(GoParser.COMMA)




            self.state = 844
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.KeyedElementContext)
            else:
                return self.getTypedRuleContext(GoParser.KeyedElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_elementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementList" ):
                listener.enterElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementList" ):
                listener.exitElementList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementList" ):
                return visitor.visitElementList(self)
            else:
                return visitor.visitChildren(self)




    def elementList(self):

        localctx = GoParser.ElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_elementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.keyedElement()
            self.state = 851
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 847
                    self.match(GoParser.COMMA)
                    self.state = 848
                    self.keyedElement() 
                self.state = 853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyedElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self):
            return self.getTypedRuleContext(GoParser.ElementContext,0)


        def key(self):
            return self.getTypedRuleContext(GoParser.KeyContext,0)


        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def getRuleIndex(self):
            return GoParser.RULE_keyedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedElement" ):
                listener.enterKeyedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedElement" ):
                listener.exitKeyedElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyedElement" ):
                return visitor.visitKeyedElement(self)
            else:
                return visitor.visitChildren(self)




    def keyedElement(self):

        localctx = GoParser.KeyedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_keyedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 854
                self.key()
                self.state = 855
                self.match(GoParser.COLON)


            self.state = 859
            self.element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def literalValue(self):
            return self.getTypedRuleContext(GoParser.LiteralValueContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey" ):
                listener.enterKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey" ):
                listener.exitKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey" ):
                return visitor.visitKey(self)
            else:
                return visitor.visitChildren(self)




    def key(self):

        localctx = GoParser.KeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_key)
        try:
            self.state = 863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 9, 10, 11, 26, 27, 28, 32, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 78, 79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 861
                self.expression(0)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 862
                self.literalValue()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def literalValue(self):
            return self.getTypedRuleContext(GoParser.LiteralValueContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement" ):
                return visitor.visitElement(self)
            else:
                return visitor.visitChildren(self)




    def element(self):

        localctx = GoParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_element)
        try:
            self.state = 867
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 9, 10, 11, 26, 27, 28, 32, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 78, 79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 865
                self.expression(0)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 866
                self.literalValue()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(GoParser.STRUCT, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def fieldDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.FieldDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.FieldDeclContext,i)


        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_structType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructType" ):
                listener.enterStructType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructType" ):
                listener.exitStructType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructType" ):
                return visitor.visitStructType(self)
            else:
                return visitor.visitChildren(self)




    def structType(self):

        localctx = GoParser.StructTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_structType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(GoParser.STRUCT)
            self.state = 870
            self.match(GoParser.L_CURLY)
            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27 or _la==61:
                self.state = 871
                self.fieldDecl()
                self.state = 872
                self.eos()
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 879
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tag = None # String_Context

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def embeddedField(self):
            return self.getTypedRuleContext(GoParser.EmbeddedFieldContext,0)


        def string_(self):
            return self.getTypedRuleContext(GoParser.String_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_fieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDecl" ):
                listener.enterFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDecl" ):
                listener.exitFieldDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDecl" ):
                return visitor.visitFieldDecl(self)
            else:
                return visitor.visitChildren(self)




    def fieldDecl(self):

        localctx = GoParser.FieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_fieldDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 881
                self.identifierList()
                self.state = 882
                self.type_()
                pass

            elif la_ == 2:
                self.state = 884
                self.embeddedField()
                pass


            self.state = 888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 887
                localctx.tag = self.string_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAW_STRING_LIT(self):
            return self.getToken(GoParser.RAW_STRING_LIT, 0)

        def INTERPRETED_STRING_LIT(self):
            return self.getToken(GoParser.INTERPRETED_STRING_LIT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_string_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_" ):
                listener.enterString_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_" ):
                listener.exitString_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_" ):
                return visitor.visitString_(self)
            else:
                return visitor.visitChildren(self)




    def string_(self):

        localctx = GoParser.String_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_string_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            _la = self._input.LA(1)
            if not(_la==78 or _la==79):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmbeddedFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(GoParser.TypeNameContext,0)


        def STAR(self):
            return self.getToken(GoParser.STAR, 0)

        def getRuleIndex(self):
            return GoParser.RULE_embeddedField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmbeddedField" ):
                listener.enterEmbeddedField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmbeddedField" ):
                listener.exitEmbeddedField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmbeddedField" ):
                return visitor.visitEmbeddedField(self)
            else:
                return visitor.visitChildren(self)




    def embeddedField(self):

        localctx = GoParser.EmbeddedFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_embeddedField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 892
                self.match(GoParser.STAR)


            self.state = 895
            self.typeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GoParser.FUNC, 0)

        def signature(self):
            return self.getTypedRuleContext(GoParser.SignatureContext,0)


        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_functionLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionLit" ):
                listener.enterFunctionLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionLit" ):
                listener.exitFunctionLit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionLit" ):
                return visitor.visitFunctionLit(self)
            else:
                return visitor.visitChildren(self)




    def functionLit(self):

        localctx = GoParser.FunctionLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_functionLit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(GoParser.FUNC)
            self.state = 898
            self.signature()
            self.state = 899
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return GoParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex" ):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = GoParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.match(GoParser.L_BRACKET)
            self.state = 902
            self.expression(0)
            self.state = 903
            self.match(GoParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slice_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COLON)
            else:
                return self.getToken(GoParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_slice_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlice_" ):
                listener.enterSlice_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlice_" ):
                listener.exitSlice_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlice_" ):
                return visitor.visitSlice_(self)
            else:
                return visitor.visitChildren(self)




    def slice_(self):

        localctx = GoParser.Slice_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_slice_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(GoParser.L_BRACKET)
            self.state = 921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -144115183311122920) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 49567) != 0:
                    self.state = 906
                    self.expression(0)


                self.state = 909
                self.match(GoParser.COLON)
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -144115183311122920) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 49567) != 0:
                    self.state = 910
                    self.expression(0)


                pass

            elif la_ == 2:
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -144115183311122920) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 49567) != 0:
                    self.state = 913
                    self.expression(0)


                self.state = 916
                self.match(GoParser.COLON)
                self.state = 917
                self.expression(0)
                self.state = 918
                self.match(GoParser.COLON)
                self.state = 919
                self.expression(0)
                pass


            self.state = 923
            self.match(GoParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAssertionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeAssertion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAssertion" ):
                listener.enterTypeAssertion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAssertion" ):
                listener.exitTypeAssertion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAssertion" ):
                return visitor.visitTypeAssertion(self)
            else:
                return visitor.visitChildren(self)




    def typeAssertion(self):

        localctx = GoParser.TypeAssertionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_typeAssertion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(GoParser.DOT)
            self.state = 926
            self.match(GoParser.L_PAREN)
            self.state = 927
            self.type_()
            self.state = 928
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def nonNamedType(self):
            return self.getTypedRuleContext(GoParser.NonNamedTypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(GoParser.ELLIPSIS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = GoParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(GoParser.L_PAREN)
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -144115183311122920) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 49567) != 0:
                self.state = 937
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 931
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 932
                    self.nonNamedType()
                    self.state = 935
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                    if la_ == 1:
                        self.state = 933
                        self.match(GoParser.COMMA)
                        self.state = 934
                        self.expressionList()


                    pass


                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 939
                    self.match(GoParser.ELLIPSIS)


                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 942
                    self.match(GoParser.COMMA)




            self.state = 947
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonNamedType(self):
            return self.getTypedRuleContext(GoParser.NonNamedTypeContext,0)


        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_methodExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodExpr" ):
                listener.enterMethodExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodExpr" ):
                listener.exitMethodExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodExpr" ):
                return visitor.visitMethodExpr(self)
            else:
                return visitor.visitChildren(self)




    def methodExpr(self):

        localctx = GoParser.MethodExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_methodExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.nonNamedType()
            self.state = 950
            self.match(GoParser.DOT)
            self.state = 951
            self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_receiverType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverType" ):
                listener.enterReceiverType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverType" ):
                listener.exitReceiverType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiverType" ):
                return visitor.visitReceiverType(self)
            else:
                return visitor.visitChildren(self)




    def receiverType(self):

        localctx = GoParser.ReceiverTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_receiverType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(GoParser.SEMI, 0)

        def EOF(self):
            return self.getToken(GoParser.EOF, 0)

        def EOS(self):
            return self.getToken(GoParser.EOS, 0)

        def getRuleIndex(self):
            return GoParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEos" ):
                return visitor.visitEos(self)
            else:
                return visitor.visitChildren(self)




    def eos(self):

        localctx = GoParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_eos)
        try:
            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 955
                self.match(GoParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 956
                self.match(GoParser.EOF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 957
                self.match(GoParser.EOS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 958
                if not self.closingBracket():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.closingBracket()")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[18] = self.statementList_sempred
        self._predicates[70] = self.expression_sempred
        self._predicates[71] = self.primaryExpr_sempred
        self._predicates[98] = self.eos_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def statementList_sempred(self, localctx:StatementListContext, predIndex:int):
            if predIndex == 0:
                return self.closingBracket()
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def primaryExpr_sempred(self, localctx:PrimaryExprContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def eos_sempred(self, localctx:EosContext, predIndex:int):
            if predIndex == 7:
                return self.closingBracket()
         




